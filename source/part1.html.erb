---
  title: Osa 1
  exercise_page: true
  quiz_page: true
  published: true
---


<% partial 'partials/hint', locals: { name: 'Ensimmäisen osan tavoitteet' } do %>

  <p>
    Osaat kirjoittaa ohjelmia, jotka lukevat käyttäjältä syötettä ja tekevät laskentaa syötteen perusteella. Tunnet käsitteet muuttuja, ehtolause ja toistolause, ja osaat käyttää näitä ohjelmissasi. Ymmärrät ohjelman suorituksen lineaarisena ja deterministisenä prosessina. Tiedät mitä lohkot ovat ja tunnet lohkojen merkityksen muuttujien näkyvyyden ja olemassaolon kannalta.
  </p>

<% end %>

<% partial 'partials/material_heading' do %>
  Johdanto
<% end %>

<% partial 'partials/learning_objectives', locals: { name: 'Oppimistavoitteet' } do %>

  <ul>

    <li>
      Tiedät muutamia esimerkkejä ...
    </li>
    <li>
      Tunnet käsitteet ohjelma, ohjelmointikieli ja lähdekoodi
    </li>
    <li>
      Tiedät, että lähdekoodi koostuu lauseista ja lausekkeista.
    </li>

  </ul>
  
<% end %>


<p>
  Ohjelmoinnin opiskelua harkitseva tietää harvoin kuinka riippuvainen yhteiskuntamme on ohjelmoijien tuottamista ohjelmistoista. Ilman ohjelmistoja yhteydenpito, kaupankäynti, matkustaminen ja niin edelleen olisi monimutkaisempaa. Puhelimet eivät toimisi tai niitä olisi vain muutamia, verkkopankkeja saatikka pankki- tai luottokortteja ei olisi, matkojen varaaminen ja henkilöasiakirjojen käyttäminen ei onnistuisi verkon yli, ja terveydenhuoltopalveluissa sähköisistä palveluista kuten e-reseptistä tai potilastietojen nopeasta siirtämisestä osastojen ja sairaaloiden välillä voisi vain unelmoida. Wikipediaa tai hakukoneita ei myöskään olisi ja tiedon hakeminen tapahtuisi sana- ja tietokirjoista.
</p>

<p>
  Digitalisaatio -- eli digitaalisen tietotekniikan yleistyminen arkielämässä -- muuttaa ihmisten arkea. Fyysiset tuotteet muuttuvat sähköisiksi, jolloin esimerkiksi uutisten jakaminen on nopeampaa ja edullisempaa. Digitaaliset palvelut eivät ole paikkasidonnaisia, jolloin niitä voidaan viedä kansainvälisille markkinoille ja toisaalta digitaalista työtä tekevien työntekijöiden ei tarvitse aina olla fyysisesti samassa paikassa. Perinteistä tuotantoa voidaan myös tehostaa, sillä erilaiset digitaaliset seurantamekanismit kuten varastonhallinta ja niistä kertyvän tiedon analyysi mahdollistavat tuotannon kohdentamisen tarveperustaisesti.
</p>

<p>
  Tämä on johtanut tilanteeseen, missä työnkuvia katoaa ja työnkuvia syntyy. Samalla tieto siitä, mitä digitalisoituvien tehtävien suorittaminen vaatii katoaa järjestelmien syövereihin. Joitakin vuosikymmeniä sitten puhelujen yhdistämiseen tarvittiin ihmistä, kun nykyään puhelujen yhdistämisen hoitavat ohjelmistot. Joitakin vuosikymmeniä sitten toisaalta mobiilisovellusten kehittäjiä, data-analyytikkoja tai vaikkapa bloggaajia ei ollut lainkaan. Palveluiden muuttuminen sähköiseksi myös piilottaa niihin liittyvää monimutkaisuutta. Kun olet esimerkiksi lähdössä lentomatkalle ja teet lähtöselvitystä verkossa olevalla lomakkeella, lomakkeen lähettäminen aiheuttaa kymmenten järjestelmien välisen vuoropuhelun. Nimeesi ja henkilötietoihisi liittyvät merkinnät käydään läpi, passisi tilanne ja mahdollisten viisumien voimassaolo tarkistetaan, lentosi tilanne tarkastetaan, aiemmat lentosi käydään läpi, paikkavarauksesi menee paikkavarauksia hallinnoivaan järjestelmään, lentoyhtiöihin liittyvät kanta-asiakkuutesi käydään läpi, lentokoneeseen tankattavan polttoaineen määrää päivitetään ja niin edelleen.
</p>

<p>
  Vaikka digitalisaatio voi tehostaa toimintaa muunmuassa vapauttamalla työntekijän helposti automatisoitavista tehtävistä, on digitalisaatiossa myös haasteita. Sähköisten järjestelmien käytön oppiminen ei ole aina helppoa ja työnkuvien muutoksen vaatima jatkuva uudelleenkouluttautuminen on uudenlainen koulutukseen liittyvä haaste. Innokkuus sähköisten palveluiden käyttöönotossa vähentää myös perinteisiä palveluita --  kukapa ei esimerkiksi olisi kuullut pankkipalveluiden digitalisoitumisen ja kassapalveluiden vähentymisen sivuvaikutuksena tuomista pitkistä pankkijonoista. Sähköiset palvelut ovat ihmisten tekemiä ja harvoin virheettömiä. Harva ei ole kuullut huonosti toimivista ohjelmistoista.
</p>

<p>
  Tietojenkäsittelytieteilijät ja laajemmin ohjelmistotekniikan ammattilaiset ovat digitaalisten palveluiden arkkitehtejä. Vastuullamme on näiden järjestelmien toteutus siten, että ne toimivat mahdollisimman hyvin järjestelmien kohdeyleisölle -- myös niille, jotka eivät ole tottuneet käyttämään vastaavia järjestelmiä. Järjestelmien loppukäyttäjät harvoin tietävät kuka tai ketkä ovat toteuttaneet kyseiset järjestelmät -- harva on kuullut esimerkiksi <a href="https://en.wikipedia.org/wiki/Margaret_Hamilton_(scientist)" target="_blank" norel>Margaret Hamilton</a>ista, joka kirjoitti avaruuteen pääsemisessä ja kuulennossa auttaneen ohjelman.
</p>

<p>
  Ohjelmointia voidaan ajatella nykyajan käsityöläistaitona, ja ohjelmistoalan työläisiä on maailmassa kymmeniä miljoonia. Tälle modernille käsityöläistaidolle on myös kysyntää -- esimerkiksi Tivi uutisoi vuonna 2016 aiheesta otsikolla "<a href="http://www.tivi.fi/Kaikki_uutiset/it-osaaja-paasee-toihin-vaikka-heti-6555159" target="_blank" norel>It-osaaja pääsee töihin vaikka heti</a>". Ohjelmistojen ja digitaalisten järjestelmien ymmärryksen tarve näkyy myös nykyään kaikkialla -- ohjelmoinnin alkeita opetetaan jo peruskoulussa, ja samalla esimerkiksi moderni tiede hyödyntää enemmän ja enemmän tiedon analysoinnissa käytettäviä ohjelmistoja sekä ohjelmistoalan innovaatioita. Esimerkiksi meteorologit, fyysikot ja kemistit käyttävät ohjelmistoja ja ohjelmoivat työssään. Myös kasvatustiede ja opetusala hyödyntää digitalisaation tuomia mahdollisuuksia yhä enemmän.
</p>
  
<p>
  Tällä kurssilla otat ensiaskeleet ohjelmointiin. Opit kirjoittamaan ohjelmia ja ymmärtämään niiden toimintaa. Tulet jäsentämään ohjelmissa olevia osakokonaisuuksia pieniksi paloiksi ja esittämään ohjelmissa esiintyviä käsitteitä yhteistoiminnassa toimivina palasina. Käsitteet kuten <em>muuttuja</em>, <em>ehtolause</em>, <em>toistolause</em>, <em>luokka</em> ja <em>olio</em> ovat kurssin lopuksi hyvin tuttuja, ja tiedät myös hieman algoritmiikasta sekä ohjelmistojen testaamisesta. Kurssin jälkeen saatat myös ajatella yhteiskunnan palveluita ohjelmoijan näkökulmasta ja pohdit niiden toimintaa (tai toimimattomuutta) ohjelmistojen tarjoamien mahdollisuuksien ja rajoitteiden näkökulmasta. 
</p>

<p>
  Kurssi on tarkoitettu ohjelmoinnin alkeiskurssiksi kohdeyleisöä sen laajemmin rajoittamatta. Kurssi on samalla yksi ensiaskelista tietojenkäsittelytieteen opintoihin. Kurssin jälkeen ja kurssin aikaan kannattaa harkita muunmuassa kursseja Tietokantojen perusteet, Ohjelmistotekniikan menetelmät, Tietorakenteet ja algoritmit, sekä Johdatus yliopistomatematiikkaan.
</p>


<% partial 'partials/material_sub_heading' do %>
  Ohjelmoija kirjoittaa lähdekoodia
<% end %>

<p>
  Ohjelmointi on ohjelmistojen suunnittelua ja toteutusta. Toteutettava toiminnallisuus määräytyy ohjelmiston tilaajien ja käyttäjien toiveiden ja vaatimusten perusteella. Ohjelmia toteutetaan (eli kirjoitetaan tai "koodataan") tyypillisesti ihmisten kirjoitettavaksi ja luettavaksi tarkoitetulla ohjelmointikielellä. Ohjelmointikieliä on satoja ja tällä kurssilla keskitytään näistä kielistä yhteen. Kurssin kielenä on <a href="https://en.wikipedia.org/wiki/Java_(programming_language)" target="_blank" rel="noopener">Java</a>, joka on yksi maailman eniten käytetyistä ohjelmointikielistä. Javaa tuntevan on myös helppo oppia uusia ohjelmointikieliä.
</p>

<p>
  Ohjelmointikielet kuten Java tarjoavat suuren määrän valmiita komentoja, joita ohjelmoija käyttää ohjelmistoja luodessa. Tämä helpottaa ohjelmointia, sillä aivan kaikkea ei tarvitse toteuttaa alusta lähtien. Esimerkiksi graafisia käyttöliittymiä toteutettaessa ohjelmointikielillä on tyypillisesti valmiita toiminnallisuuksia erilaisten valikoiden ja näkymien luomiseen. Iso osa ohjelmoinnista onkin ohjelmointikielen valmiiksi tarjoamien komentojen soveltamista ongelmien ratkaisuissa.
</p>  

<p>
  Kirjoitettua "koodia" kutsutaan <strong>lähdekoodiksi</strong>. Lähdekoodi koostuu lauseista (statement) ja lausekkeista (expression), joita yleensä voidaan lukea rivi riviltä ylhäältä alaspäin ja vasemmalta oikealle. Esimerkiksi tekstin "Hei maailma" tulostuksessa käytetään Java-ohjelmointikielellä valmista komentoa <code>System.out.println()</code>, jolle kerrotaan sulkujen sisälle tulostettava teksti.
</p>

<% partial 'partials/code_highlight' do %>
  System.out.println("Hei maailma");
<% end %>

<p>
  Lause <code>System.out.println</code> on Java-ohjelmointikielen valmiiksi tarjoama komento, jota käytetään merkkijonon tulostamiseen. Komento käytännössä käskee tietokonetta tulostamaan sille sulkeiden sisällä hipsuissa annetun merkkijonon. Komennon pääte <code>ln</code> on lyhenne sanasta <em>line</em>, eli komentoa käyttämällä merkkijonon jälkeen tulostetaan myös rivinvaihto. Lauseen loppuun kirjoitetaan puolipiste <code>;</code>.
</p>

<p>
  Java-ohjelmat vaativat toimiakseen kurssin aikana tutuksi tulevan rungon. Ohjelman runko on seuraavanlainen.
</p>

<% partial 'partials/code_highlight' do %>
  public class Esimerkki {
      public static void main(String[] args) {

          // Tänne kirjoitetaan ohjelman käyttämät lauseet
          System.out.println("Tulostettava teksti");

      }
  }
<% end %>


<p>
  Yhdenkin merkin puuttuminen voi johtaa ohjelmoidessa virhetilanteeseen. Ohjelmoija saattaa vahingossa esimerkiksi syöttää pilkun pisteen sijaan, kirjoittaa vaikkapa <code>printin</code> sanan <code>println</code> sijaan, jättää tulostettavasta merkkijonosta hipsut pois, tai unohtaa komentoa seuraavan puolipisteen. Jokainen edelläolevista esimerkeistä johtaa virhetilanteeseen, missä ohjelman suoritus ei onnistu.
</p>

<p>
  Ohjelmien kirjoittaminen on siis hyvin tarkkaa. Alla on annettuna esimerkkiohjelma ja osittain valmis ohjelma. Täydennä osittain valmista ohjelmaa siten, että se vastaa esimerkkiohjelmaa merkki merkiltä.
</p>

<div class="typonator-widget">
  <div class="typonator-model-source">
public class Esimerkki {
    public static void main(String[] args) {
        // Tänne kirjoitetaan ohjelman käyttämät lauseet
        System.out.println("Tulostettava teksti");
    }
}
  </div>
  <div class="typonator-template-source">
public class Esimerkki {
    public static void main(String[] args) {
        // Tänne kirjoitetaan ohjelman käyttämät lauseet
        // MARK
    }
}
  </div>
</div>


<p>
  Mikäli yllä oleva ohjelma olisi toteutettu ohjelmointiympäristössä, voisi ohjelman suorittaa. Tällöin tietokone tulostaisi merkkijonon "Tulostettava teksti".
</p>


<% partial 'partials/material_sub_heading' do %>
  Tietokone suorittaa ohjelman
<% end %>

<p>
  Kun ohjelmoija haluaa kokeilla toimiiko hänen kirjoittamansa lähdekoodi, hän suorittaa ohjelman. Ohjelman suorittamiseen tarvittavat askeleet riippuvat käytetystä ohjelmointikielestä, mutta pääpiirteisesti askeleita on kaksi. Ensin lähdekoodi käännetään konekieliseen muotoon, jonka jälkeen ohjelma suoritetaan.
</p> 

<p>
TODO: kuva -- ohjelmoija -> lähdekoodi -> kääntäjä (ohjelma) -> konekielinen ohjelma -> tietokone
</p>


<p>
  Lähdekoodi käännetään konekieliseen muotoon ohjelmointikielikohtaisella kääntäjällä, joka on myös ohjelma. Tämän jälkeen ohjelma konekielinen ohjelma käynnistetään, eli siinä olevat käskyt suoritetaan yksi kerrallaan tietokoneen prosessorilla. 
</p>

<p>
  Prosessori on... 
</p>

<p>
  Ohjelman suorittamiseen liittyvät askeleet ovat ohjelmointikielikohtaisia. Edellä kuvattu lähdekoodin kääntäminen konekieliseen muotoon tapahtuu esimerkiksi C-ohjelmointikielessä, kun taas Java-ohjelmointikielessä ohjelma käännetään Java-ohjelmointikielen tavukoodiksi, jonka Java-kielen tulkki sitten suorittaa. Jotkut ohjelmointikielet kuten PHP ja Python ovat toisaalta sellaisia, että niitä ei käännetä lainkaan, vaan vaan ohjelmointikielen tulkki suorittaa komennot yksi kerrallaan. TODO: tarkista
</p>

<p>
  Nämä askeleet vaikuttavat siihen, miten ja milloin ohjelmien virheet ilmenevät. Mikäli ohjelma käännetään ennen suoritusta, voi kääntäjä etsiä tyypillisiä virheitä. Mikäli ohjelma tulkataan ilman käännöstä, virheet nousevat esiin vasta suorituksen aikana tai suorituksen epäonnistuessa. Tämä vaikuttaa myös ohjelmoinnissa käytetyn ohjelmointiympäristön tarjoamiin vinkkeihin -- jotkut ohjelmointiympäristöt kääntävät kirjoitettavaa ohjelmaa jatkuvasti konekielelle, jolloin ohjelmoija saa palautetta ohjelmassa olevista virheistä heti. Toisissa ohjelmointikielissä tätä mahdollisuutta taas ei ole, jolloin ohjelmointiympäristöjen tarjoamat vinkit ovat vähäisemmät.
</p>

<p>
  TODO: kerro, että voidaan kirjoittaa tekstieditorissa tiedoston sijaan, mutta silloin ei saada ohjelmointiympäristön tukea kuten vinkkejä virheistä. TODO: sano, että tällä kurssilla on käytössä ohjelmointiympäristöön lisättävä liitännäinen, joka myös helpottaa ohjelmointitehtävien lataamista, testaamista ja palauttamista.
</p>


<% partial 'partials/material_heading' do %>
  Tulostaminen ja lukeminen
<% end %>


<% partial 'partials/learning_objectives', locals: { name: 'Oppimistavoitteet' } do %>

  <ul>
    <li>
      Osaat kirjoittaa ohjelman, joka tulostaa tekstiä.
    </li>
    <li>
      Osaat luoda merkkijonomuuttujan (String) ja käyttää merkkijonomuuttujaa osana tekstiä tulostavaa ohjelmaa.
    </li>
    <li>
      Osaat luoda uuden merkkijonomuuttujan useampia merkkijonoja yhdistelemällä.
    </li>
    <li>
      Osaat kirjoittaa ohjelman, joka pyytää käyttäjältä tekstimuotoista syötettä.
    </li>
    <li>
      Osaat käyttää kurssilla käytetyn ohjelmointiympäristön TMC:n perustoiminnallisuuksia, eli osaat..
      <ul>
	      <li>ladata tehtävät TMC:n avulla</li>
	      <li>suorittaa tehtävän TMC:n avulla</li>
	      <li>testata tehtävää TMC:n avulla</li>
	      <li>palauttaa tehtävän arvostelua varten TMC:n avulla</li>
      </ul>
    </li>

  </ul>
  
<% end %>

<% partial 'partials/material_sub_heading' do %>
  Ohjelmarunko
<% end %>

<p>
  Java-ohjelmat vaativat toimiakseen ohjelmarungon. Ohjelmarunko on seuraavanlainen.
</p>

<% partial 'partials/code_highlight' do %>
  public class Esimerkki {
      public static void main(String[] args) {

          // Tänne kirjoitetaan ohjelman käyttämät lauseet

      }
  }
<% end %>

<p>
  TODO: käy läpi oleelliset palat, kerro miten sijaitsee tiedostossa. TODO: kerro että kutsutaan luokaksi "class". TODO: kerro Miten tiedoston nimi vaikuttaa luokan nimeen.
</p>

<p>
  Materiaalin esimerkeissä ei käytetä aina ohjelmarunkoa, mutta voit olettaa, että se tarvitaan aina. Esimerkit voivat siis olla esimerkiksi yhden rivin mittaisia kuten alla oleva tulostusesimerkki.
</p>

<% partial 'partials/code_highlight' do %>
  System.out.println("Hei maailma!");
<% end %>

<p>
  Todellisuudessa yllä oleva esimerkki näyttää Java-kielisellä ohjelmalla kuitenkin seuraavalta.
</p>

<% partial 'partials/code_highlight' do %>
  public class Esimerkki {
      public static void main(String[] args) {

          // Tänne kirjoitetaan ohjelman käyttämät lauseet
          System.out.println("Hei maailma!");
      }
  }
<% end %>


<% partial 'partials/material_sub_heading' do %>
  Tulostuskomento
<% end %>


<p>
  Yhden rivin tulostaminen, yksi komento
</p>  


<% partial 'partials/code_highlight' do %>
public class Ohjelma {

    public static void main(String[] args) {
        System.out.println("Hei maailma!");    
    }
}
<% end %>

<% partial 'partials/sample_output' do %>
  Hei maailma!
<% end %>


<p>
  Ohjelman rakenne
</p>

<p>
  Useamman rivin tulostaminen, yksi komento
</p>  


<% partial 'partials/code_highlight' do %>
public class Ohjelma {

    public static void main(String[] args) {
        System.out.println("Hei maailma!");
        System.out.println("... ja maailmankaikkeus!")
    }
}
<% end %>

<% partial 'partials/sample_output' do %>
Hei maailma!
... ja maailmankaikkeus!
<% end %>

<p>
  Ohjelma suoritetaan askel askeleelta, eli tulostus tapahtuu aina edellä mainitussa järjestyksessä.
</p>


<p>
  Ohjelman suoritus askeleittain, visu
</p>


<% partial 'partials/hint', locals: { name: 'Ohjelmoinnin aloittaminen' } do %>

  <p>
    Ohjelmoinnin aloittamiseen tarvitset seuraavat asiat.
  </p>

  <ol>
    <li>
      Käyttäjätunnuksen kurssilla käytettyyn TMC-järjestelmään.
    </li>
    <li>
      Javan (Java JDK).
    </li>
    <li>
      NetBeans with TMC-ohjelmointiympäristön.
    </li>
  </ol>

  <p>
    Ohjeistus oleellisten työvälineiden asentamiseen sekä kurssilla tarvittavan käyttäjätunnuksen luomiseen löytyy osoitteesta <a href="https://materiaalit.github.io/tmc-asennus/netbeans/" target="_blank">https://materiaalit.github.io/tmc-asennus/netbeans/</a>.
  </p>

  <div class="text-center text-xs-center">
    <p>
      <a class="btn btn-success btn-xs" href="https://materiaalit.github.io/tmc-asennus/netbeans/" target="_blank">
	Ohjeisiin!
      </a>
    </p>
  </div>

<% end %>

<p>
  Alla on kurssin ensimmäinen ohjelmointitehtävä. Ohjelmointitehtävien tehtävänannot löytyvät kurssimateriaalista (eli materiaalista mitä juuri luet). Tehtävänannon saa auki klikkaamalla tehtävänannon otsikkoa (alla "Ada Lovelace"). Tehtäväpohjat löytyvät TMC:stä (asennusohjeet yllä kohdassa "Ohjelmoinnin aloittaminen").
</p>

<p>
  Voit katsoa ohjeet tehtävän tekemiseen myös seuraavalta videolta.
</p>


<% partial 'partials/exercise', locals: { name: 'Ada Lovelace' } do %>

  <p>
    Tehtäväpohjassa on seuraavanlainen ohjelmarunko:
  </p>

  <% partial 'partials/code_highlight' do %>
    public class Nimi {

        public static void main(String[] args) {
            // Kirjoita ohjelmasi tähän alle

        }
    }
  <% end %>

  <p>
    Rivi "// Kirjoita ohjelmasi tähän alle" on <em>kommenttirivi</em>, jota tietokone ei ota huomioon ohjelmaa suoritettaessa. Lisää kommenttirivin alle lause, joka tulostaa merkkijonon "Ada Lovelace" ja suorita ohjelma. Ohjelman tulostuksen tulee olla seuraavanlainen:
  </p>

  <% partial 'partials/sample_output' do %>
    Ada Lovelace
  <% end %>

  <p>
    Kun olet tehnyt tehtävän ja huomaat, että ohjelma tulostaa halutun merkkijonon, palauta tehtävä TMC:lle. Tutustu tämän jälkeen halutessasi lisää <a href="https://en.wikipedia.org/wiki/Ada_Lovelace" target="_blank" rel="noopener">Ada Lovelaceen</a>, joka oli yksi ensimmäisistä ohjelmoijista.
  </p>

<% end %>

<p>
  Tehtävänannoissa olevat toiveet tulostusmuodosta ovat tarkkoja. Jos tehtävänannossa toivotaan esimerkiksi että ohjelma tulostaa sulun toisen rivin ensimmäiseksi merkiksi, ei sulkua saa jättää tulostamatta.
</p>

<p>
  TODO: esimerkki, missä tulostetaan tekstiä neljälle riville (tarina). Maininta, että komento <code>println</code> tulostaa rivinvaihdon -- ohjelman tulee siis tulostaa aina myös rivinvaihto, mikäli tulostuksen tulee näyttää siltä, että riviä vaihdetaan.
</p>

<% partial 'partials/exercise', locals: { name: 'TODO: tehtävä, jossa kirjoitetaan useampi rivi' } do %>

  <p>
    Tehtäväpohjassa on seuraavanlainen ohjelmarunko:
  </p>

  <% partial 'partials/code_highlight' do %>
    public class Tervehdys {

        public static void main(String[] args) {

        }
    }
  <% end %>

  <p>
    Muokkaa ohjelmaa siten, että ohjelman suoritus tulostaa seuraavanlaisen kaksirivisen merkkijonon.
  </p>

  <% partial 'partials/sample_output' do %>
    Ada Lovelace
  <% end %>

<% end %>

<p>
  Rivinvaihdon voi tulostaa myös erikoismerkillä "\n". Esimerkki.
</p>

<% partial 'partials/exercise', locals: { name: 'TODO: tehtävä, jossa kirjoitetaan rivit "väärässä järjestyksessä"' } do %>

  <p>
    todo
  </p>

<% end %>




<% partial 'partials/material_sub_heading' do %>
  Merkkijonomuuttuja
<% end %>


<p>
literaali eli arvo (?) -- annetaan arvo -- arvon voi asettaa myös muuttujaan, josta sen löytää myöhemmin
</p>

<% partial 'partials/code_highlight' do %>
  public class Ohjelma {
  
      public static void main(String[] args) {
          String viesti = "Hei maailma!";

          System.out.println(viesti);
          System.out.println("... ja maailmankaikkeus!")
      }
  }
<% end %>


<% partial 'partials/code_highlight' do %>
  public class Ohjelma {
  
      public static void main(String[] args) {
          String viesti = "Hei maailma!";

          System.out.println(viesti + "\n... ja maailmankaikkeus!")
      }
  }
<% end %>


<% partial 'partials/exercise', locals: { name: 'TODO: tehtävä, jossa tulostetaan valmiin merkkijonon sisältö' } do %>

  <p>
    pitää tulostaa merkkijonomuuttujan sisältö
  </p>

  <% partial 'partials/code_highlight' do %>
    public class Ohjelma {
    
        public static void main(String[] args) {
            String viesti = "Olipa kerran...";
  
            // muokkaa tätä tulostuslausetta
            System.out.println("Ja tarina alkaa näin")
        }
    }
  <% end %>
  
<% end %>



<% partial 'partials/code_highlight' do %>
  public class Ohjelma {
  
      public static void main(String[] args) {
          String luvut = "yksi" + "\n" + "kaksi" + "\n" + "kolme";

          System.out.println(luvut)
      }
  }
<% end %>

<% partial 'partials/sample_output' do %>
  yksi
  kaksi
  kolme
<% end %>
  



<% partial 'partials/material_sub_heading' do %>
  Syötteen lukeminen
<% end %>



<% partial 'partials/code_highlight' do %>
  import java.util.Scanner;

  public class Ohjelma {
  
      public static void main(String[] args) {
          Scanner lukija = new Scanner(System.in);

          System.out.println("Syötä viesti: ");

          String viesti = lukija.nextLine();

          System.out.println("Viestisi oli " + viesti);
      }
  }
<% end %>

<p>
  kerro suoritusjärjestys askel askeleelta
</p>

<p>
  vinkki: tyypillinen virhe -- kysytään eka viestiä, jolloin tulostusta ei näy
</p>


<% partial 'partials/exercise', locals: { name: 'TODO: tehtävä, jossa luetaan merkkijono joka sitten tulostetaan' } do %>

  <p>
    pitää tulostaa merkkijonomuuttujan sisältö
  </p>

  <% partial 'partials/code_highlight' do %>
    public class Ohjelma {
    
        public static void main(String[] args) {
            String viesti = "Olipa kerran...";
  
            // muokkaa tätä tulostuslausetta
            System.out.println("Ja tarina alkaa näin")
        }
    }
  <% end %>
  
<% end %>



<% partial 'partials/code_highlight' do %>
  import java.util.Scanner;

  public class Ohjelma {
  
      public static void main(String[] args) {
          Scanner lukija = new Scanner(System.in);

          System.out.println("Syötä kolme riviä, tulostan ne sen jälkeen: ");

          String eka = lukija.nextLine();
          String toka = lukija.nextLine();
          String kolmas = lukija.nextLine();

          System.out.println(eka);
          System.out.println(toka);
          System.out.println(kolmas);
      }
  }
<% end %>

<p>
  Käänteinen järjestys
</p>

<% partial 'partials/code_highlight' do %>
  import java.util.Scanner;

  public class Ohjelma {
  
      public static void main(String[] args) {
          Scanner lukija = new Scanner(System.in);

          System.out.println("Syötä kolme riviä, tulostan ne käänteisessä järjestyksessä: ");

          String eka = lukija.nextLine();
          String toka = lukija.nextLine();
          String kolmas = lukija.nextLine();

          System.out.println(kolmas);
          System.out.println(toka);
          System.out.println(eka);
      }
  }
<% end %>



- TODO: crowdsorcerer, kokonaan lukittu tehtäväboksi, 
opiskelija kirjoittaa esimerkkisyötteitä ja tulosteita
- esim: tulostuksen tulee olla muotoa
- esim: tulostuksen ei tule olla muotoa

<% partial 'partials/material_heading' do %>
  Muuttujat ja ohjelmien kielellistäminen
<% end %>


<% partial 'partials/learning_objectives', locals: { name: 'Oppimistavoitteet' } do %>

  <ul>
    <li>
      Tunnet käsitteen muuttuja. Tiedät mitä eroa on muuttujan nimellä ja muuttujan arvolla. 
    </li>
    <li>
      Osaat luoda ja käsitellä merkkijonomuuttujien lisäksi kokonaisluku-, liukuluku-, ja totuusarvomuuttujia.
    </li>

  </ul>
  
<% end %>



- täällä sanotaan mikä on lause ja mikä on lauseke

<% partial 'partials/material_heading' do %>
  Vaihtoehtoinen toiminta: ehtolauseet
<% end %>


<% partial 'partials/learning_objectives', locals: { name: 'Oppimistavoitteet' } do %>

  <ul>
    <li>
      Tunnet käsitteen ehtolause.
    </li>
    <li>
      Osaat luoda ohjelmaan vaihtoehtoista toimintaa ehtolauseen avulla.
    </li>
    <li>
      Osaat käyttää merkkijono-, kokonaisluku-, liukuluku-, ja totuusarvomuuttujia osana ehtolausetta.
    </li>
    
  </ul>
  
<% end %>

<pre>

if bla {

} else if (Bla) {
  bla
}

</pre>

sama kuin 
<pre>

if bla {

} else {
  if (Bla) {

  }
}
</pre>

- TODO: crowdsorcerer, kokonaan lukittu tehtäväboksi, 
opiskelija kirjoittaa esimerkkisyötteitä ja tulosteita


<% partial 'partials/material_heading' do %>
  Toiminnallisuuden toistaminen: toistolauseet
<% end %>


<% partial 'partials/learning_objectives', locals: { name: 'Oppimistavoitteet' } do %>

  <ul>
    <li>
      Tunnet käsitteen toistolause.
    </li>
    <li>
      todo: ikuinen toistolause while true, osaa poistua toistolauseesta break, osaa palata toistolauseen alkuun continue
    </li>
    <li>
      todo: jotenkin lohkon määritelmä
    </li>
    
  </ul>
  
<% end %>


- TODO: crowdsorcerer, kokonaan lukittu tehtäväboksi, 
opiskelija kirjoittaa esimerkkisyötteitä ja tulosteita
 - rivinvaihdot
