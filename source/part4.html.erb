---
  title: Osa 4
  exercise_page: true
  quiz_page: true
  published: false
---


<% partial 'partials/hint', locals: { name: 'Ensimmäisestä konekokeesta' } do %>

  <p>
    Muistathan aloittaa kurssin ensimmäisen konekokeen viimeistään 27.9. Ohjeet edellisen osan alussa.
  </p>

<% end %>



<% partial 'partials/hint', locals: { name: 'Neljännen osan tavoitteet' } do %>

  <p>
    Tietää olio-ohjelmoinnin perusperiaatteet ja luo luokkia, jotka kuvaavat annettua ongelma-aluetta. Tunnistaa käsitteet alkeis- ja viittaustyyppinen muuttuja. Osaa määritellä olioita, jotka sisältävät olioita. Osaa käyttää olioita metodin parametrina sekä luoda metodeja, jotka palauttavat olioita. Tuntee listarakenteen ja osaa lisätä ja poistaa listalla olevia alkioita. Tuntee käsitteen indeksi ja osaa käydä listan läpi while-toistolauseen avulla.
  </p>

<% end %>


<% partial 'partials/material_heading' do %>
  Olio-ohjelmointi
<% end %>

<p>
  <strong>Olio-ohjelmoinnissa</strong> on kyse ratkaistavassa ongelmassa esiintyvien <strong>käsitteiden eristämisestä omiksi kokonaisuuksikseen</strong> sekä näiden <strong>kokonaisuuksien käyttämistä ongelman ratkaisemisessa</strong>. Kun ongelmaan liittyvät käsitteet on tunnistettu, niistä voidaan myös keskustella. Toisin ajatellen muodostamme ratkaistavasta ongelmasta abstraktioita, joiden avulla ongelmaa on helpompi käsitellä.
</p>

<p>
  Kun ongelmasta tunnistetaan käsitteitä, voidaan niitä vastaavia rakenteita luoda myös ohjelmaan. Näitä rakenteita ja niistä luotavia yksittäisiä ilmentymiä eli olioita käytetään ongelman ratkaisemisessa. Nyt ehkä käsittämättömältä tuntuva lausahdus <strong>ohjelma rakennetaan pienistä selkeistä yhteistoiminnassa olevista olioista</strong> alkaa hiljalleen kurssin edetessä tuntua järkeenkäyvältä ja jopa itsestäänselvältä.
</p>


<% partial 'partials/material_sub_heading' do %>
  Luokka ja Olio
<% end %>

<p>
  Olemme käyttäneet jo luokkia ja olioita, joita Java tarjoaa. <strong>Luokka</strong> määrittelee olioiden ominaisuudet eli niihin liittyvät tiedot eli oliomuuttujat, jotka määrittelevät yksittäisen olion sisäisen tilan, ja niiden tarjoamat komennot eli metodit. <strong>Olio</strong> luodaan luokkaan kirjoitetun määrittelyn perusteella. Samasta luokasta voidaan luoda useampia olioita, joilla jokaisella on eri tila eli jokaisella on omat oliomuuttujien arvot. Jokaisella oliolla on myös metodit, jotka olion luomiseen käytetyssä luokassa on määritelty.
</p>

<p>
  <strong>Metodi</strong> on luokkaan kirjoitettu lähdekoodista koostuva kokonaisuus, jolle on annettu nimi, ja jota voidaan kutsua. Metodi liittyy aina tiettyyn luokkaan, ja sitä käytetään usein luokasta tehdyn olion sisäisen tilan muokkaamiseen.
</p>

<p>
  Esimerkiksi <code>Scanner</code> on Javan tarjoama luokka, josta luotuja olioita olemme hyödyntäneet ohjelmissamme. Alla ohjelmassa luodaan Scanner-olio nimeltä <code>lukija</code>, jota käytetään kokonaislukumuuttujien lukemiseen.
</p>


<% partial 'partials/code_highlight' do %>
  // luodaan Scanner-luokasta olio, jonka nimeksi tulee lukija
  Scanner lukija = new Scanner(System.in);

  while (true) {
  int luku = Integer.parseInt(lukija.nextLine());

  if (luku == 0) {
  break;
  }

  System.out.println("Luettu " + luku);
  }
<% end %>


<p>
  Luokasta luodaan olio aina kutsumalla olion luovaa metodia eli <strong>konstruktoria</strong> komennon <code>new</code> avulla. Esimerkiksi <code>Scanner</code>-luokasta luodaan uusi ilmentymä eli olio kun kutsutaan <code>new Scanner(..)</code>. Konstruktorit saavat parametreja kuten muutkin metodit.
</p>

<% partial 'partials/hint', locals: { name: 'Luokan ja olion suhde' } do %>

  <p>
    Luokka kuvaa siitä luotavien olioiden "rakennuspiirustukset". Otetaan analogia tietokoneiden ulkopuoleisesta maailmasta. Rintamamiestalot lienevät monille tuttuja. Voidaan ajatella, että jossain on olemassa piirustukset jotka määrittelevät minkälainen rintamamiestalo on. Piirrustukset ovat luokka, eli ne määrittelevät minkälaisia olioita luokasta voidaan luoda:
  </p>

  <p>
    <img src="/img/rintamamiestalo-rakennuspiirrustus.jpg"/>
  </p>

  <p>
    Yksittäiset oliot eli rintamamiestalot on tehty samojen piirustusten perusteella, eli ne ovat saman luokan ilmentymiä. Yksittäisten olioiden tila eli ominaisuudet (esim. seinien väri, katon rakennusmateriaali ja väri, kivijalan väri, ovien rakennusmateriaali ja väri, ...) vaihtelevat. Seuraavassa yksi "rintamamiestalo-luokan olio":
  </p>

  <p>
    <img src="/img/rintamamiestalo.jpg" height=250 />
  </p>

<% end %>


<% partial 'partials/hint', locals: { name: 'Visuaalinen johdanto oliohin' } do %>

  <p>
    Osoitteessa <a href="https://emo-2014.herokuapp.com" target="_blank" norel">https://emo-2014.herokuapp.com</a> o visuaalinen johdanto olio-ohjelmointiin. Johdannon läpikäynti vie korkeintaan 15 minuuttia -- katso kyseinen johdanto nyt.
  </p>

<% end %>


<% partial 'partials/exercise', locals: { name: 'Ensimmäinen tilisi' } do %>

  <p>
    Tehtäväpohjan mukana tulee valmis luokka <code>Tili</code>. Luokan <code>Tili</code> olio esittää pankkitiliä, jolla on saldo (eli jossa on jokin määrä rahaa). Tilejä käytetään näin:
  </p>

  <% partial 'partials/code_highlight' do %>
    Tili artonTili = new Tili("Arton tili", 100.00);
    Tili artonSveitsilainenTili = new Tili("Arton tili Sveitsissä", 1000000.00);

    System.out.println("Alkutilanne");
    System.out.println(artonTili);
    System.out.println(artonSveitsilainenTili);

    artonTili.otto(20);
    System.out.println("Arton tilin saldo on nyt: " + artonTili.saldo());
    artonSveitsilainenTili.pano(200);
    System.out.println("Arton toisen tilin saldo on nyt: " + artonSveitsilainenTili.saldo());

    System.out.println("Lopputilanne");
    System.out.println(artonTili);
    System.out.println(artonSveitsilainenTili);
  <% end %>

  <p>
    Tee ohjelma, joka luo tilin jonka saldo on 100.0, panee tilille 20.0 ja tulostaa tilin. <strong>Huom!</strong> tee kaikki nämä operaatiot täsmälleen tässä järjestyksessä.
  </p>

<% end %>


<% partial 'partials/exercise', locals: { name: 'Ensimmäinen tilisiirtosi' } do %>

  <p>
    Tässäkin tehtävässä on käytössä edellisessä tehtävässä mukana ollut luokka <code>Tili</code>.
  </p>
  
  <p>
    Tee ohjelma joka:
  </p>

  <ol class="lista">
    <li>Luo tilin nimeltä <code>"Matin tili"</code> saldolla 1000</li>
    <li>Luo tilin nimeltä <code>"Oma tili"</code> saldolla 0</li>
    <li>Nostaa matin tililtä 100.0</li>
    <li>Panee omalle tilille 100.0</li>
    <li>Tulostaa molemmat tilit</li>
  </ol>
  
<% end %>

<% partial 'partials/material_sub_heading' do %>
  Luokan luominen
<% end %>


<p>
  <strong>Luokka määrittelee</strong> minkälaisia luokasta luotavat oliot ovat:
</p>

<ul>
  <li><strong>mitä metodeita olioilla on</strong></li>
  <li><strong>minkälainen olioiden tila on</strong> tai toisinsanoen mitä muuttujia olioilla on</li>
</ul>

<p>
  Tutustutaan seuraavaksi oman luokan luomiseen sekä luokkaan liittyvien oliomuuttujien määrittelyyn.
</p>


<p>
  Luokka määritellään kuvaamaan jotain mielekästä kokonaisuutta. Usein "mielekäs kokonaisuus" kuvaa jotain reaalimaailman asiaa. Jos tietokoneohjelman pitää käsitellä henkilötietoja, voisi olla mielekästä määritellä erillinen luokka <code>Henkilo</code> joka kokoaa yhteen henkilöön liittyvät metodit ja ominaisuudet.
</p>

<p>
  Aloitetaan. Oletetaan että meillä on projektirunko jossa on tyhjä pääohjelma:
</p>

<% partial 'partials/code_highlight' do %>
  public class Main {

  public static void main(String[] args) {

  }
  }
<% end %>



<% partial 'partials/hint', locals: { name: 'Uuden luokan luominen' } do %>

  <p>
    Uuden luokan luominen NetBeansissa tapahtuu valitsemalla vasemmalta <em>projects</em>-kohdasta hiiren oikealla napilla <em>new</em> ja <em>java class</em>. Avautuvaan dialogiin annetaan luokalle nimi.
  </p>

  <p>
    Kuten muuttujien ja metodien nimien, myös luokan nimen on aina oltava mahdollisimman kuvaava. Usein ohjelmoinnin edetessä luokka elää ja muuttaa muotoaan, joten on myös mahdollista että luokka nimetään uudelleen.
  </p>


  <p>
    <em>
      Luokkien, muuttujien ja metodien nimissä ei tyypillisesti käytetä ääkkösiä. Vältä niiden käyttöä myös tässä.
    </em>
  </p>

<% end %>

<p>
  Luodaan luokka nimeltä <code>Henkilo</code>. Luokkaa varten luodaan erillinen nimeltä <code>Henkilo.java</code>. Ohjelmamme koostuu nyt siis kahdesta erillisestä tiedostosta, sillä myös pääohjelma on omassa tiedostossaan. Aluksi Henkilo.java -tiedosto sisältää luokan määrittelyn <strong>public class Henkilo</strong> sekä luokan sisällön rajaavat aaltosulut.
</p>

<% partial 'partials/code_highlight' do %>
  public class Henkilo {

  }
<% end %>

<p>
  Luokkaa kuvaamaan voi piirtää myös luokkakaavion, jonka merkintätekniikkaan tutustutaan tässä samalla. Henkilo-niminen luokka, jossa ei ole mitään sisällä näyttää seuraavalta:
</p>

<p>
  <img src="/img/diagrams/luokkakaavio-henkilo.png">
</p>

<p>
  Luokka määrittelee mitä toiminnallisuuksia ja ominaisuuksia luokasta luotavilla olioilla on. Päätetään, että jokaisella henkilöoliolla on nimi ja ikä. Nimi on luonnollista esittää merkkijonona, eli Stringinä, ja ikä taas kokonaislukuna. Lisätään nämä rakennuspiirustuksiimme:
</p>

<% partial 'partials/code_highlight' do %>
  public class Henkilo {
  private String nimi;
  private int ika;
  }
<% end %>

<p>
  Määrittelimme yllä että jokaisella <code>Henkilo</code>-luokasta luotavalla oliolla on <code>nimi</code> ja <code>ika</code>. Luokan sisälle määriteltyjä muuttujia kutsutaan <strong>oliomuuttujiksi</strong> tai olion kentiksi tai olion attribuuteiksi. Muitakin nimiä tuntuu löytyvän.
</p>

<p>
  Oliomuuttujat kirjoitetaan luokan määrittelyä "public class Henkilo {" seuraaville riveille. Jokaisen muuttujan eteen asetetaan avainsana private. Avainsana <strong>private</strong> tarkoittaa sitä, että muuttujat ovat "piilossa" olion sisällä. Tätä kutsutaan <strong>kapseloinniksi</strong>.
</p>

<p>
  Luokkaakaaviossa luokkaan liittyvät muuttujat määritellään muodossa "muuttujanNimi: muuttujanTyyppi". Miinusmerkki ennen muuttujan nimeä kertoo, että muuttuja on kapseloitu (sillä on avainsana private).
</p>

<p>
  <img src="/img/diagrams/luokkakaavio-henkilo-ika-ja-nimi.png">
</p>

<p>
  Olemme nyt määritelleet rakennuspiirustukset -- luokan -- henkilöoliolle. Jokaisella uudella henkilöolioilla on muuttujat <code>nimi</code> ja <code>ika</code>, joissa voi olla oliokohtainen arvo. Henkilöiden "tila" koostuu niiden nimeen ja ikään asetetuista arvoista.
</p>


<% partial 'partials/exercise', locals: { name: 'Luokan luominen' } do %>

  <p>
    Uuden luokan saa lisättyä NetBeansissa seuraavasti: Ruudun vasemmalla reunalla on projektilistaus (Projects). Paina projektin nimen kohdalla hiiren oikeaa nappia. Valitse avautuvasta valikosta <em>New</em> ja <em>Java Class</em>. Anna luokan nimeksi (Class Name) <code>Koira</code>.
  </p>

  <p>
    Tässä tehtävässä harjoittelet luokan luomista. Luo tehtäväpohjaan luokka nimeltä <code>Koira</code> ja lisää sille oliomuuttujat <code>private String nimi</code>, <code>private String rotu</code> ja <code>private int ika</code>. Luokkakaaviona luokka näyttää seuraavalta:
  </p>

  <p>
    <img src="/img/diagrams/luokkakaavio-teht-koira.png">
  </p>


  <p>
    Luokalla ei vielä oikeastaan tee mitään, mutta tämän askeleen harjoittelusta on hyötyä myöhempää ajatellen.
  </p>

<% end %>



<% partial 'partials/material_sub_heading' do %>
  Konstruktorin määrittely
<% end %>

<p>
  Konstruktoria käytetään olion luomiseen luokasta.
</p>

<p>
  Luotavalle oliolle halutaan asettaa alkutila. Itse määritellyn olion luominen tapahtuu hyvin samaan tapaan kuin Javan valmiiden olioiden kuten <code>ArrayList</code>:ien luominen. Oliot luodaan <code>new</code>-komennolla. Olion luomisen yhteydessä on kätevää pystyä antamaan arvot luotavan olion muuttujille. Esimerkiksi uutta henkilö-oliota luotaessa olisi kätevää pystyä antamaan oliolle nimi:
</p>

<% partial 'partials/code_highlight' do %>
  public static void main(String[] args) {
  Henkilo ada = new Henkilo("Ada");
  // ...
  }
<% end %>

<p>
  Tämä onnistuu määrittelemällä olion luova metodi eli <strong>konstruktori</strong>. Konstruktori määritellään oliomuuttujien jälkeen. Seuraavassa esimerkissä Henkilo-luokalle on määritelty konstruktori, jota voidaan käyttää uuden Henkilo-olion luomiseen. Konstruktori asettaa luotavan olion iäksi 0 ja nimeksi konstruktorin parametrina annettavan merkkijonon:
</p>

<% partial 'partials/code_highlight' do %>
  public class Henkilo {
  private String nimi;
  private int ika;

  public Henkilo(String nimiAlussa) {
  this.ika = 0;
  this.nimi = nimiAlussa;
  }
  }
<% end %>

<p>
  Konstruktorin nimi on aina sama kuin luokan nimi. Yllä luokka (<em>class</em>) on Henkilo, joten konstruktorin nimeksi tulee Henkilo. Konstruktorille annetaan lisäksi parametrina luotavan henkilööolion nimi. Parametri asetetaan sulkuihin konstruktorin nimen perään. Parametreja mahdollisesti sisältävien sulkujen jälkeen tulee aaltosulut, joiden sisälle määritellään lähdekoodi, jonka ohjelma suorittaa konstruktorikutsun (esim. <code>new Henkilo("Ada")</code>) yhteydessä.
</p>

<p>
  Oliot luodaan aina konstruktorin avulla.
</p>

<p>
  Muutama huomio: konstruktorin sisällä on lauseke <code>this.ika = 0</code>. Lausekkeessa asetetaan juuri luotavan olion (eli "tämän" olion) oliomuuttujan ika arvoksi 0. Toinen lauseke <code>this.nimi = nimiAlussa;</code> taas asettaa juuri tämän olion sisäiselle muuttujalle <code>nimi</code> arvoksi parametrina annetun merkkijonon.
</p>

<p>
  Koska oliomuuttujat on määritelty konstruktorin aaltosulkujen ulkopuolella, voi niitä käyttää myös konstruktorin sisällä.
</p>

<p>
  Nyt luokkakaavioon on merkitty luokan nimen ja muuttujien lisäksi myös konstruktori. Konstruktori saa public näkyvyysmääreen takia eteen plussan, jonka lisäksi siitä merkitään sen nimi ja parametrin tyypit (tässä <code>+ Henkilo(String)</code>).
</p>

<p>
  <img src="/img/diagrams/luokkakaavio-henkilo-ika-ja-nimi-ja-konstruktori.png">
</p>

<p>
  Vielä yksi huomio: jos ohjelmoija ei tee luokalle konstruktoria, tekee Java automaattisesti luokalle oletuskonstruktorin. Oletuskonstruktori on konstruktori joka ei tee mitään. Jos konstruktoria ei jostain syystä tarvita, ei sellaista tarvitse ohjelmoida.
</p>


<% partial 'partials/exercise', locals: { name: 'Toinen luokka' } do %>

  <p>
    Uuden luokan saa lisättyä seuraavasti: Ruudun vasemmalla reunalla on projektilistaus. Paina projektin nimen kohdalla hiiren oikeaa nappia. Valitse avautuvasta valikosta <em>New</em> ja <em>Java Class</em>. Jos haluat että luokan nimi on Luokka, aseta luokan nimeksi (Class Name) <code>Luokka</code>.
  </p>

  <p>
    Luo luokka nimeltä <code>Luokka</code>. Luokalla on oliomuuttujina <code>private String koodi</code>, esimerkiksi "B221", ja <code>private int istumapaikat</code>. Luo tämän jälkeen konstruktori <code>public Luokka(String luokanKoodi, int istumapaikkojenMaara)</code>, minkä avulla oliomuuttujiin asetetaan arvot.
  </p>

  <p>
    <img src="/img/diagrams/luokkakaavio-teht-luokka.png">
  </p>

  <p>
    Tälläkään luokalla ei vielä oikeastaan tee mitään, mutta seuraavassa tehtävässä luokastamme tehdyllä oliolla voi jo tulostella :).
  </p>

<% end %>



<% partial 'partials/material_sub_heading' do %>
  Metodien määrittely
<% end %>

<p>
  Alkaa olla korkea aika päästä käyttämään Henkilo-luokasta luotuja olioita. Osaamme luoda olion ja alustaa olion muuttujat. Järkevään toimintaan pystyäkseen olioilla on oltava myös metodeja. <strong>Metodi</strong> on luokkaan kirjoitettu lähdekoodista koostuva kokonaisuus, jolle on annettu nimi, ja jota voidaan kutsua. Metodi liittyy aina tiettyyn luokkaan, ja sitä käytetään usein luokasta tehdyn olion sisäisen tilan muokkaamiseen.
</p>

<p>
  Tehdään luokalle Henkilo metodi, jota käytetään olion tietojen tulostamiseen.
</p>


<% partial 'partials/code_highlight' do %>
  public class Henkilo {
  private String nimi;
  private int ika;

  public Henkilo(String nimiAlussa) {
  this.ika = 0;
  this.nimi = nimiAlussa;
  }

  public void tulostaHenkilo() {
  System.out.println(this.nimi + ", ikä " + this.ika + " vuotta");
  }
  }
<% end %>

<p>
  Metodi kirjoitetaan luokan sisälle konstruktorin alapuolelle. Metodin nimen eteen tulee <code>public void</code> sillä metodin on tarkoitus näkyä ulkomaailmalle ("public") ja metodi ei palauta arvoa ("void").
</p>

<% partial 'partials/hint', locals: { name: 'Oliot ja määre static' } do %>

  <p>
    Aiemmin toteuttamissamme metodeissa on ollut käytössä määre <code>static</code>. Määre <code>static</code> viittaa siihen, että metodi ei liity olioon ja sen avulla ei voi käsitellä oliolle määriteltyjä muuttujia.
  </p>

  <p>
    Metodeistamme puuttuu jatkossa määre <code>static</code> jos ne käsittelevät olioiden tietoa. Jos taas metodit eivät käsittele olioihin liittyvää tietoa, niissä voidaan käyttää määrettä static.
  </p>

<% end %>

<p>
  Luokkakaavioon on merkitty luokan nimen, oliomuuttujien ja konstruktorin lisäksi nyt myös metodi <code>tulostaHenkilo</code>. Koska metodilla on public-määre, tulee sille alkuun plus, jota seuraa metodin nimi. Metodille ei ole määritelty parametreja, joten ei myöskään piirretä metodin sulkujen sisälle. Metodille merkitään myös tieto siitä, että se ei palauta arvoa, tässä "void".
</p>

<p>
  <img src="/img/diagrams/luokkakaavio-henkilo-ika-ja-nimi-ja-konstruktori-ja-tulosta.png">
</p>

<p>
  Metodin <code>tulostaHenkilo</code> sisällä on yksi koodirivi joka käyttää hyvakseen oliomuuttujia <code>nimi</code> ja <code>ika</code> -- luokkakaavio ei kerro sisäisestä toteutuksesta. Olion sisäisiin muuttujiin viitataan etuliitteellä <code>this</code>. Kaikki olion muuttujat ovat siis näkyvillä ja käytettävissä metodin sisällä.
</p>

<p>
  Luodaan pääohjelmassa kolme henkilöä ja pyydetään niitä tulostamaan itsensä:
</p>

<% partial 'partials/code_highlight' do %>
  public class Main {

  public static void main(String[] args) {
  Henkilo ada = new Henkilo("Ada");
  Henkilo antti = new Henkilo("Antti");
  Henkilo martin = new Henkilo("Martin");

  ada.tulostaHenkilo();
  antti.tulostaHenkilo();
  martin.tulostaHenkilo();
  }
  }
<% end %>

<p>
  Tulostuu:
</p>

<% partial 'partials/sample_output' do %>
  Ada, ikä 0 vuotta
  Antti, ikä 0 vuotta
  Martin, ikä 0 vuotta
<% end %>


<p>
  Sama screencastina:
</p>

<a href="http://www.youtube.com/watch?feature=player_embedded&v=fWwXQ5n2gYo" class="youtube" height="300" target="_blank" rel="noopener"><img src=" https://www.cs.helsinki.fi/group/java/k13/ohpe/img/youtube.jpg"/></a>

<p>
  &nbsp;
</p>


<% partial 'partials/exercise', locals: { name: 'Pilli' } do %>

  <p>
    Luo luokka nimeltä <code>Pilli</code>. Pillillä on oliomuuttujina <code>private String aani</code>. Luo tämän jälkeen konstruktori <code>public Pilli(String pillinAani)</code>, minkä avulla luodaan uusi pilli, jolle annetaan ääni.
  </p>

  <p>
    Lisää pillille vielä metodi <code>public void soi()</code>, joka tulostaa pillin äänen.
  </p>

  <p>
    Pillin tulee toimia seuraavasti.
  </p>

  <% partial 'partials/code_highlight' do %>
    Pilli sorsapilli = new Pilli("Kvaak");
    Pilli kukkopilli = new Pilli("Peef");

    sorsapilli.soi();
    kukkopilli.soi();
    sorsapilli.soi();
  <% end %>

  <% partial 'partials/sample_output' do %>
    Kvaak
    Peef
    Kvaak
  <% end %>

<% end %>


<% partial 'partials/exercise', locals: { name: 'Ovi' } do %>

  <p>
    Luo luokka nimeltä <code>Ovi</code>. Ovella ei ole oliomuuttujia. Luo sille parametriton konstruktori (tai käytä oletuskonstruktoria).  Luo tämän jälkeen ovelle metodi <code>public void koputa()</code>, jota kutsuttaessa tulostuu viesti "Who's there?".
  </p>

  <p>
    Oven tulee toimia seuraavasti.
  </p>

  <% partial 'partials/code_highlight' do %>
    Ovi alexander = new Ovi();

    alexander.koputa();
    alexander.koputa();
  <% end %>

  <% partial 'partials/sample_output' do %>
    Who's there?
    Who's there?
  <% end %>

<% end %>


<% partial 'partials/exercise', locals: { name: 'Tuote' } do %>

  <p>
    Luo luokka <code>Tuote</code> joka esittää kaupan tuotetta jolla on hinta, lukumäärä ja nimi.
  </p>

  <p>
    Uuden luokan saa lisättyä seuraavasti: Ruudun vasemmalla reunalla on projektilistaus. Paina projektin nimen kohdalla hiiren oikeaa nappia. Valitse avautuvasta valikosta <em>New</em> ja <em>Java Class</em>. Anna luokan nimeksi (Class Name) <code>Tuote</code>.
  </p>

  <p>
    Luokalla tulee olla:
  </p>

  <ul>
    <li>Konstruktori <code>public Tuote(String nimiAlussa, double hintaAlussa, int maaraAlussa)</code></li>
    <li>Metodi <code>public void tulostaTuote()</code> joka tulostaa tuotteen tiedot tässä muodossa:
      <% partial 'partials/sample_output' do %>
	Banaani, hinta 1.1, 13 kpl
      <% end %>
    </li>
  </ul>

  <p>
    Piirrä myös luokkaan liittyvä luokkakaavio itsellesi!
  </p>

<% end %>


<% partial 'partials/material_sub_heading' do %>
  Oliomuuttujan arvon muuttaminen metodissa
<% end %>

<p>
  Lisätään aiemmin rakentamallemme Henkilo-luokalle metodi, joka kasvattaa henkilön ikää vuodella:
</p>

<% partial 'partials/code_highlight' do %>
  public class Henkilo {
  // ...

  public void vanhene() {
  this.ika = this.ika + 1;
  }
  }
<% end %>

<p>
  Metodi kirjoitetaan <code>tulostaHenkilo</code>-metodin tapaan luokan <code>Henkilo</code> sisälle. Metodissa kasvatetaan oliomuuttujan <code>ika</code> arvoa yhdellä.
</p>

<p>
  Myös luokkakaavio päivittyy.
</p>

<p>
  <img src="/img/diagrams/luokkakaavio-henkilo-ika-ja-nimi-ja-konstruktori-ja-tulosta-ja-vanhene.png">
</p>


<p>
  Kutsutaan metodia ja katsotaan mitä tapahtuu:
</p>

<% partial 'partials/code_highlight' do %>
  public class Main {

  public static void main(String[] args) {
  Henkilo ada = new Henkilo("Ada");
  Henkilo antti = new Henkilo("Antti");

  ada.tulostaHenkilo();
  antti.tulostaHenkilo();

  System.out.println("");

  ada.vanhene();
  ada.vanhene();

  ada.tulostaHenkilo();
  antti.tulostaHenkilo();
  }
  }
<% end %>

<p>
  Ohjelman tulostus on seuraava:
</p>

<% partial 'partials/sample_output' do %>
  Ada, ikä 0 vuotta
  Antti, ikä 0 vuotta

  Ada, ikä 2 vuotta
  Antti, ikä 0 vuotta
<% end %>

<p>
  Eli "syntyessään" molemmat oliot ovat nollavuotiaita (konstruktorissa suoritetaan mm. rivi <code>this.ika = 0;</code>). Olion <code>ada</code> metodia <code>vanhene</code> kutsutaan kaksi kertaa. Kuten tulostus näyttää, tämä saa aikaan sen että Adan ikä on vanhenemisen jälkeen 2 vuotta. Kutsumalla metodia Adaa vastaavalle oliolle, toisen henkilöolion ikä ei muutu, sillä jokaiselle luokasta luotavalle oliolle luodaan myös omat oliomuuttujat.
</p>


<% partial 'partials/exercise', locals: { name: 'Vähenevä laskuri (4 osaa)' } do %>

  <p>
    Tässä tehtävässä on useampi osa. Jokainen osa vastaa yhtä tehtäväpistettä.
  </p>

  <p>
    Tehtäväpohjan mukana tulee osittain valmiiksi toteutettu luokka <code>VahenevaLaskuri</code>:
  </p>

  <% partial 'partials/code_highlight' do %>
    public class VahenevaLaskuri {
    private int arvo;   // oliomuuttuja joka muistaa laskurin arvon

    public VahenevaLaskuri(int arvoAlussa) {
    this.arvo = arvoAlussa;
    }

    public void tulostaArvo() {
    System.out.println("arvo: " + this.arvo);
    }

    public void vahene() {
    // kirjoita tänne metodin toteutus
    // laskurin arvon on siis tarkoitus vähentyä yhdellä
    }

    // ja tänne muut metodit
    }
  <% end %>

  <p>
    Seuraavassa esimerkki miten pääohjelma käyttää vähenevää laskuria:
  </p>

  <% partial 'partials/code_highlight' do %>
    public class Paaohjelma {
    public static void main(String[] args) {
    VahenevaLaskuri laskuri = new VahenevaLaskuri(10);

    laskuri.tulostaArvo();

    laskuri.vahene();
    laskuri.tulostaArvo();

    laskuri.vahene();
    laskuri.tulostaArvo();
    }
    }
  <% end %>

  <p>
    Pitäisi tulostua:
  </p>

  <% partial 'partials/sample_output' do %>
    arvo: 10
    arvo: 9
    arvo: 8
  <% end %>

  <p>
    <code>VahenevaLaskuri</code>-luokan konstruktorille annetaan parametrina alkuarvo. Esimerkin oliota <code>laskuri</code> luodessa laskurille välitetään parametrina arvo <code>10</code>. Esimerkin <code>laskuri</code>-olioon liittyvään oliomuuttujaan <code>arvo</code> asetetaan siis aluksi arvo <code>10</code>. Laskurin arvon voi tulostaa metodilla <code>tulostaArvo()</code>. Laskurilla tulee myös olla metodi <code>vahene()</code> joka vähentää laskurin arvoa yhdellä.
  </p>


  <h2>Metodin vahene() toteutus</h2>

  <p>
    Täydennä luokan runkoon metodin <code>vahene()</code> toteutus sellaiseksi, että se vähentää kutsuttavan olion oliomuuttujan <code>arvo</code> arvoa yhdellä. Kun olet toteuttanut metodin <code>vahene()</code>, edellisen esimerkin pääohjelman tulee toimia esimerkkitulosteen mukaan.
  </p>


  <h2>Laskurin arvo ei saa olla negatiivinen</h2>

  <p>
    Täydennä metodin <code>vahene()</code> toteutus sellaiseksi, ettei laskurin arvo mene koskaan negatiiviseksi. Eli jos laskurin arvo on jo 0, ei vähennys sitä enää vähennä. Ehtolause auttaa tässä.
  </p>

  <% partial 'partials/code_highlight' do %>
    public class Paaohjelma {
    public static void main(String[] args) {
    VahenevaLaskuri laskuri = new VahenevaLaskuri(2);

    laskuri.tulostaArvo();

    laskuri.vahene();
    laskuri.tulostaArvo();

    laskuri.vahene();
    laskuri.tulostaArvo();

    laskuri.vahene();
    laskuri.tulostaArvo();
    }
    }
  <% end %>

  <p>
    Tulostuu:
  </p>

  <% partial 'partials/sample_output' do %>
    arvo: 2
    arvo: 1
    arvo: 0
    arvo: 0
  <% end %>


  <h2>Laskurin arvon nollaus</h2>

  <p>
    Tee laskurille metodi <code>public void nollaa()</code> joka nollaa laskurin arvon, esim:
  </p>

  <% partial 'partials/code_highlight' do %>
    public class Paaohjelma {
    public static void main(String[] args) {
    VahenevaLaskuri laskuri = new VahenevaLaskuri(100);

    laskuri.tulostaArvo();

    laskuri.nollaa();
    laskuri.tulostaArvo();

    laskuri.vahene();
    laskuri.tulostaArvo();
    }
    }
  <% end %>

  <p>
    Tulostuu:
  </p>

  <% partial 'partials/sample_output' do %>
    arvo: 100
    arvo: 0
    arvo: 0
  <% end %>


  <h2>Laskurin arvon palautus</h2>


  <p>
    Tee laskurille metodi <code>public void palautaAlkuarvo()</code>, joka palauttaa laskurille arvon joka sillä oli alussa:
  </p>

  <% partial 'partials/code_highlight' do %>
    public class Paaohjelma {
    public static void main(String[] args) {
    VahenevaLaskuri laskuri = new VahenevaLaskuri(100);

    laskuri.tulostaArvo();

    laskuri.vahene();
    laskuri.tulostaArvo();

    laskuri.vahene();
    laskuri.tulostaArvo();

    laskuri.nollaa();
    laskuri.tulostaArvo();

    laskuri.palautaAlkuarvo();
    laskuri.tulostaArvo();
    }
    }
  <% end %>

  <p>
    Tulostuu:
  </p>

  <% partial 'partials/sample_output' do %>
    arvo: 100
    arvo: 99
    arvo: 98
    arvo: 0
    arvo: 100
  <% end %>


  <p>
    <strong>Vihje</strong> jotta alkuarvon voi palauttaa, se täytyy "muistaa" toisen oliomuuttujan avulla! Joudut siis lisäämään ohjelmaan oliomuuttujan johon talletetaan laskurin alussa saama arvo.
  </p>

<% end %>

<% partial 'partials/exercise', locals: { name: 'Velka' } do %>

  <p>
    Luo luokka <code>Velka</code>, jolla on double-tyyppiset oliomuuttujat <code>saldo</code> ja <code>korkokerroin</code>. Saldo ja korkokerroin annetaan konstruktorin parametrina <code>public Velka(double saldoAlussa, double korkokerroinAlussa)</code>.
  </p>
  
  <p>
    Luo luokalle myös metodit <code>public void tulostaSaldo()</code> sekä <code>public void odotaVuosi()</code>. Metodi tulostaSaldo tulostaa tämän hetkisen saldon, ja metodi odotaVuosi kasvattaa velan määrää.
  </p>
  
  <p>
    Velan määrän kasvattaminen tapahtuu kertomalla saldo korkokertoimella.
  </p>

  <p>
    Luokan tulee toimia seuraavasti:
  </p>

  <% partial 'partials/code_highlight' do %>
    public class Paaohjelma {
    public static void main(String[] args) {

    Velka asuntolaina = new Velka(120000.0, 1.01);
    asuntolaina.tulostaSaldo();

    asuntolaina.odotaVuosi();
    asuntolaina.tulostaSaldo();

    int vuosia = 0;

    while(vuosia &lt; 20) {
    asuntolaina.odotaVuosi();
    vuosia++;
    }

    asuntolaina.tulostaSaldo();
    }
    }
  <% end %>

  <p>
    Ylläolevassa esimerkissä havainnollistetaan asuntolainan kehitystä prosentin korolla.
  </p>

  <p>Tulostus:</p>

  <% partial 'partials/sample_output' do %>
    120000.0
    121200.0
    147887.0328416936
  <% end %>

  <p>
    Kun saat ohjelman toimimaan, tarkastele edelläolevaa esimerkkiä myös 1990-luvun alkupuolen laman korkokertoimilla. Tällöin korko oli jopa 15-20 prosenttia -- muuta yllä olevan esimerkin korkokertoimeksi <code>1.20</code> ja katso miten käy.
  </p>

<% end %>


<% partial 'partials/material_sub_heading' do %>
  Arvon palauttaminen metodista
<% end %>


<p>
  Metodi voi palauttaa arvon. Tähän mennessä olioihin luomamme metodit eivät palauttaneet mitään. Tämä on merkitty kirjoittamalla metodin määrittelyyn avainsana <em>void</em>.
</p>

<% partial 'partials/code_highlight' do %>
  public class Ovi {
  public void koputa() {
  ...
  }
  }
<% end %>

<p>
  Avainsana <strong>void</strong> tarkoittaa että metodi ei palauta arvoa.
</p>

<p>
  Jos haluamme, että metodi palauttaa arvon, tulee avainsanan <code>void</code> paikalle asettaa palautettavan muuttujan tyyppi. Seuraavassa esimerkissä näkyvälle luokalle Opettaja on määritelty metodi <code>arvostele</code>, joka palauttaa aina kokonaislukutyyppisen (<code>int</code>) muuttujan (tässä arvo 10). Arvon palauttaminen tapahtuu aina komennolla <strong>return</strong>:
</p>

<% partial 'partials/code_highlight' do %>
  public class Opettaja {
  public int arvostele() {
  return 10;
  }
  }
<% end %>

<p>
  Ylläoleva metodi siis palauttaa sitä kutsuttaessa <code>int</code>-tyyppisen arvon <code>10</code>. Jotta metodin palauttamaa arvoa voisi käyttää, tulee se ottaa talteen muuttujaan. Tämä tapahtuu samalla tavalla kuin normaali muuttujan arvon asetus, eli yhtäsuuruusmerkillä:
</p>

<% partial 'partials/code_highlight' do %>
  public static void main(String[] args) {
  Opettaja opettaja = new Opettaja();

  int arvostelu = opettaja.arvostele();

  System.out.println("Arvosanaksi tuli " + arvostelu);
  }
<% end %>

<p>
  Metodin paluuarvo sijoitetaan <code>int</code>-tyyppiseen muuttujaan aivan kuin mikä tahansa muukin int-arvo. Paluuarvo voi toimia myös osana mitä tahansa lauseketta:
</p>

<% partial 'partials/code_highlight' do %>
  public static void main(String[] args) {
  Opettaja opettaja = new Opettaja();

  double keskiarvo = (opettaja.arvostele() + opettaja.arvostele()) / 2.0;

  System.out.println("Arvostelujen keskiarvo " + keskiarvo);
  }
<% end %>

<p>
  Kaikki tähän mennessä näkemämme muuttujatyypit voidaan myös palauttaa metodista. Yhteenveto:
</p>

<ul>
  <li>Metodilla, joka ei palauta mitään, on <code>void</code>-määre palautettavan muuttujan tyyppinä.
    <% partial 'partials/code_highlight' do %>
      public void metodiJokaEiPalautaMitaan() {
      // metodin runko
      }
    <% end %></li>

    <li>Metodilla, joka palauttaa kokonaislukutyyppisen muuttujan, on <code>int</code>-määre palautettavan muuttujan tyyppinä.
      <% partial 'partials/code_highlight' do %>
	public int metodiJokaPalauttaaKokonaisLuvun() {
	// metodin runko, tarvitsee return-komennon
	}
      <% end %></li>


      <li>Metodilla, joka palauttaa merkkijonotyyppisen muuttujan, on <code>String</code>-määre palautettavan muuttujan tyyppinä.
	<% partial 'partials/code_highlight' do %>
	  public String metodiJokaPalauttaaTekstin() {
	  // metodin runko, tarvitsee return-komennon
	  }
	<% end %></li>

	<li>Metodilla, joka palauttaa liukulukutyyppisen muuttujan, on <code>double</code>-määre palautettavan muuttujan tyyppinä.
	  <% partial 'partials/code_highlight' do %>
	    public double metodiJokaPalauttaaLiukuluvun() {
	    // metodin runko, tarvitsee return-komennon
	    }
	  <% end %>
	</li>
</ul>

<p>
  Lisätään Henkilölle metodi joka palauttaa henkilön iän:
</p>

<% partial 'partials/code_highlight' do %>
  public class Henkilo {
  // ...

  public int palautaIka() {
  return this.ika;
  }
  }
<% end %>

<p>
  Luokka kokonaisuudessaan:
</p>

<p>
  <img src="/img/diagrams/luokkakaavio-henkilo-ika-ja-nimi-ja-konstruktori-ja-tulosta-ja-vanhene-ja-palautaika.png">
</p>


<p>
  Havainnollistetaan metodin toimintaa:
</p>

<% partial 'partials/code_highlight' do %>
  public class Main {

  public static void main(String[] args) {
  Henkilo pekka = new Henkilo("Pekka");
  Henkilo antti = new Henkilo("Antti");

  pekka.vanhene();
  pekka.vanhene();

  antti.vanhene();

  System.out.println("Pekan ikä: " + pekka.palautaIka());
  System.out.println("Antin ikä: " + antti.palautaIka());

  int yht = pekka.palautaIka() + antti.palautaIka();

  System.out.println("Pekka ja Antti yhteensä " + yht + " vuotta");
  }
  }
<% end %>


<% partial 'partials/sample_output' do %>
  Pekan ikä 2
  Antin ikä 1

  Pekka ja Antti yhteensä 3 vuotta
<% end %>


<%= partial 'partials/quiz', locals: { id: '59bd00596ee1930004e5f921' } %>

<%= partial 'partials/quiz', locals: { id: '59bd01756ee1930004e5f922' } %>

<% partial 'partials/exercise', locals: { name: 'Henkilön toteutus' } do %>
  
  <p>
    Seuraa materiaalin tähänastista esimerkkiä ja luo luokka Henkilo. Henkilön tulee sisältää seuraavan luokkakaavion määrittelemät ominaisuudet edellä mainittujen esimerkkien mukaisesti.
  </p>

  <p>
    <img src="/img/diagrams/luokkakaavio-henkilo-ika-ja-nimi-ja-konstruktori-ja-tulosta-ja-vanhene-ja-palautaika.png">
  </p>

  <% partial 'partials/code_highlight' do %>
    Henkilo pekka = new Henkilo("Pekka");
    Henkilo antti = new Henkilo("Antti");

    antti.tulostaHenkilo();

    pekka.vanhene();
    pekka.vanhene();

    antti.vanhene();

    System.out.println("Pekan ikä: " + pekka.palautaIka());
    System.out.println("Antin ikä: " + antti.palautaIka());

    int yht = pekka.palautaIka() + antti.palautaIka();

    System.out.println("Pekka ja Antti yhteensä " + yht + " vuotta");
  <% end %>

  <% partial 'partials/sample_output' do %>
    Antti, ikä 0 vuotta
    Pekan ikä 2
    Antin ikä 1

    Pekka ja Antti yhteensä 3 vuotta
  <% end %>

<% end %>


<% partial 'partials/exercise', locals: { name: 'Musiikkikappale' } do %>

  <p>
    Luo luokka nimeltä <code>Musiikkikappale</code>. Musiikkikappaleella on oliomuuttujat <code>nimi</code> (merkkijono) ja <code>pituus</code> sekunteina (kokonaisluku). Molemmat asetetaan konstruktorissa <code>public Musiikkikappale(String kappaleenNimi, int kappaleenPituus)</code>. Lisää oliolle myös metodit <code>public String nimi()</code>, joka palauttaa kappaleen nimen, ja <code>public int pituus()</code>, joka palauttaa kappaleen pituuden.
  </p>

  <p>
    Luokan tulee toimia seuraavasti.
  </p>

  <% partial 'partials/code_highlight' do %>
    Musiikkikappale garden = new Musiikkikappale("In The Garden", 10910);
    System.out.println("Kappaleen " + garden.nimi() + " pituus on " + garden.pituus() + " sekuntia.");
  <% end %>

  <% partial 'partials/sample_output' do %>
    Kappaleen In The Garden pituus on 10910 sekuntia.
  <% end %>

<% end %>


<% partial 'partials/material_sub_heading' do %>
  Henkilo-luokka laajenee
<% end %>

<p>
  Tehdään seuraavaksi henkilölle metodi, jonka avulla voidaan selvittää onko henkilö täysi-ikäinen. Metodi palauttaa totuusarvon -- joko <code>true</code> tai <code>false</code>:
</p>

<% partial 'partials/code_highlight' do %>
  public class Henkilo {
  // ...

  public boolean taysiIkainen() {
  if (this.ika &lt; 18) {
  return false;
  }

  return true;
  }

  /*
  huom. metodin voisi kirjoittaa lyhyemmin seuraavasti:

  public boolean taysiIkainen() {
  return this.ika >= 18;
  }
  */
  }
<% end %>

<p>
  Ja testataan:
</p>

<% partial 'partials/code_highlight' do %>
  public static void main(String[] args) {
  Henkilo pekka = new Henkilo("Pekka");
  Henkilo antti = new Henkilo("Antti");

  int i = 0;
  while (i &lt; 30) {
  pekka.vanhene();
  i++;
  }

  antti.vanhene();

  System.out.println("");

  if (antti.taysiIkainen()) {
  System.out.print("täysi-ikäinen: ");
  antti.tulostaHenkilo();
  } else {
  System.out.print("alaikäinen: ");
  antti.tulostaHenkilo();
  }

  if (pekka.taysiIkainen()) {
  System.out.print("täysi-ikäinen: ");
  pekka.tulostaHenkilo();
  } else {
  System.out.print("alaikäinen: ");
  pekka.tulostaHenkilo();
  }
  }
<% end %>

<% partial 'partials/sample_output' do %>
  alaikäinen: Antti, ikä 1 vuotta
  täysi-ikäinen: Pekka, ikä 30 vuotta
<% end %>

<p>
  Viritellään ratkaisua vielä hiukan. Nyt henkilön pystyy "tulostamaan" ainoastaan siten, että nimen lisäksi tulostuu ikä. On tilanteita, joissa haluamme tietoon pelkän olion nimen. Eli tehdään tarkoitusta varten oma metodi:
</p>

<% partial 'partials/code_highlight' do %>
  public class Henkilo {
  // ...

  public String getNimi() {
  return this.nimi;
  }
  }
<% end %>

<p>
  Metodi <code>getNimi</code> palauttaa oliomuuttujan <code>nimi</code> kutsujalle. Metodin nimi on hieman erikoinen. Javassa on usein tapana nimetä oliomuuttujan palauttava metodi juuri näin, eli <code>getMuuttujanNimi</code>. Tälläisiä metodeja kutsutaan usein "gettereiksi".
</p>

<p>
  Luokka kokonaisuudessaan:
</p>

<p>
  <img src="/img/diagrams/luokkakaavio-henkilo-getterit.png">
</p>

<p>
  Muotoillaan pääohjelma käyttämään uutta "getteri"-metodia:
</p>

<% partial 'partials/code_highlight' do %>
  public static void main(String[] args) {
  Henkilo pekka = new Henkilo("Pekka");
  Henkilo antti = new Henkilo("Antti");

  int i = 0;
  while (i &lt; 30) {
  pekka.vanhene();
  i++;
  }

  antti.vanhene();

  System.out.println("");

  if (antti.taysiIkainen()) {
  System.out.println(antti.getNimi() + " on täysi-ikäinen");
  } else {
  System.out.println(antti.getNimi() + " on alaikäinen");
  }

  if (pekka.taysiIkainen()) {
  System.out.println(pekka.getNimi() + " on täysi-ikäinen");
  } else {
  System.out.println(pekka.getNimi() + " on alaikäinen ");
  }
  }
<% end %>

<p>
  Tulostus alkaa olla jo aika siisti:
</p>

<% partial 'partials/sample_output' do %>
  Antti on alaikäinen
  Pekka on täysi-ikäinen
<% end %>


<% partial 'partials/exercise', locals: { name: 'Elokuva' } do %>
  <p>
    Luo luokka Elokuva, jolla on oliomuuttujat <code>nimi</code> (String) ja <code>ikaraja</code> (int). Tee luokalle konstruktori <code>public Elokuva(String elokuvanNimi, int elokuvanIkaraja)</code> sekä metodit <code>public String nimi()</code> ja <code>public int ikaraja()</code>. Ensimmäinen palauttaa elokuvan nimen ja toinen elokuvan ikärajan.
  </p>

  <p>
    Esimerkki luokan toiminnasta.
  </p>

  <% partial 'partials/code_highlight' do %>
    Elokuva chipmunks = new Elokuva("Alvin and the Chipmunks: The Squeakquel", 0);

    Scanner lukija = new Scanner(System.in);

    System.out.println("Minkä ikäinen olet?");
    int ika = Integer.parseInt(lukija.nextLine());

    System.out.println();
    if (ika &gt;= chipmunks.ikaraja()) {
    System.out.println("Saat katsoa elokuvan " + chipmunks.nimi());
    } else {
    System.out.println("Et saa katsoa elokuvaa " + chipmunks.nimi());
    }
  <% end %>

  <% partial 'partials/sample_output' do %>
    Minkä ikäinen olet?
    <font color="red">7</font>

    Saat katsoa elokuvan Alvin and the Chipmunks: The Squeakquel
  <% end %>

<% end %>


<% partial 'partials/material_sub_heading' do %>
  Olion merkkijonoesitys ja toString-metodi
<% end %>

<p>
  Olemme syyllistyneet osittain huonoon ohjelmointityyliin tekemällä metodin jonka avulla olio tulostetaan, eli metodin <code>tulostaHenkilo</code>. Suositeltavampi tapa on määritellä oliolle metodi jonka palauttaa olion "merkkijonoesityksen". Merkkijonoesityksen palauttavan metodin nimi on Javassa aina <code>toString</code>. Määritellään seuraavassa henkilölle tämä metodi:
</p>

<% partial 'partials/code_highlight' do %>
  public class Henkilo {
  // ...

  public String toString() {
  return this.nimi + ", ikä " + this.ika + " vuotta";
  }
  }
<% end %>

<p>
  Metodi <code>toString</code> toimii kuten <code>tulostaHenkilo</code>, mutta se ei itse tulosta mitään vaan palauttaa merkkijonoesityksen, jota metodin kutsuja voi halutessaan suorittaa tulostamisen.
</p>

<p>
  Metodia käytetään hieman yllättävällä tavalla:
</p>

<% partial 'partials/code_highlight' do %>
  public static void main(String[] args) {
  Henkilo pekka = new Henkilo("Pekka");
  Henkilo antti = new Henkilo("Antti");

  int i = 0;
  while (i &lt; 30) {
  pekka.vanhene();
  i++;
  }

  antti.vanhene();

  System.out.println(antti); // sama kun System.out.println(antti.toString());
  System.out.println(pekka); // sama kun System.out.println(pekka.toString());
  }
<% end %>


<p>
  Periaatteena on, että <code>System.out.println</code>-metodi pyytää olion merkkijonoesityksen ja tulostaa sen. Merkkijonoesityksen palauttavan <code>toString</code>-metodin kutsua ei tarvitse kirjoittaa itse, sillä Java lisää sen automaattisesti. Ohjelmoijan kirjoittaessa:
</p>

<% partial 'partials/code_highlight' do %>
  System.out.println(antti);
<% end %>

<p>
  Java täydentää suorituksen aikana kutsun muotoon:
</p>

<% partial 'partials/code_highlight' do %>
  System.out.println(antti.toString());
<% end %>

<p>
  Käy niin, että oliolta pyydetään sen merkkijonoesitys. Olion palauttama merkkijonoesitys tulostetaan normaaliin tapaan <code>System.out.println</code>-komennolla.
</p>

<p>
  <b>Voimme nyt poistaa turhaksi käyneen <code>tulostaHenkilo</code>-metodin.</b>
</p>

<p>
  Olioscreencastin toinen osa:
</p>

<a href="http://www.youtube.com/watch?feature=player_embedded&v=d-56AxspStE" class="youtube" height="300" target="_blank" rel="noopener"><img src=" https://www.cs.helsinki.fi/group/java/k13/ohpe/img/youtube.jpg"/></a>

<!--
     <p><iframe allowfullscreen="" frameborder="0" height="450" width="700" src="http://www.youtube.com/embed/eX7XXP5GHTk"></iframe></p>
   -->

<p>&nbsp;</p>

<% partial 'partials/exercise', locals: { name: 'Agentti' } do %>

  <p>
    Tehtäväpohjassa on määriteltynä luokka Agentti, jolla on etunimi ja sukunimi. Luokalle on määritelty metodi <code>tulosta</code>, joka luo seuraavanlaisen merkkijonoesityksen.
  </p>

  <% partial 'partials/code_highlight' do %>
    Agentti bond = new Agentti("James", "Bond");
    bond.tulosta();
  <% end %>

  <% partial 'partials/sample_output' do %>
    My name is Bond, James Bond
  <% end %>

  <p>
    Poista luokan metodi <code>tulosta</code> ja luo luokalle metodi <code>public String toString()</code>, joka palauttaa edellämainitun merkkijonoesityksen.
  </p>

  <p>
    Luokan tulee toimia jatkossa seuraavasti.
  </p>

  <% partial 'partials/code_highlight' do %>
    Agentti bond = new Agentti("James", "Bond");

    bond.toString(); // ei tulosta mitään
    System.out.println(bond);

    Agentti ionic = new Agentti("Ionic", "Bond");
    System.out.println(ionic);
  <% end %>

  <% partial 'partials/sample_output' do %>
    My name is Bond, James Bond
    My name is Bond, Ionic Bond
  <% end %>

<% end %>


<% partial 'partials/exercise', locals: { name: 'Maksukortti (6 osaa)' } do %>

  <p>
    Helsingin Yliopiston opiskelijaruokaloissa eli Unicafeissa opiskelijat maksavat lounaansa käyttäen maksukorttia. Lopullinen Maksukortti tulee näyttämään luokkakaaviona seuraavalta:
  </p>

  <p>
    <img src="/img/diagrams/luokkakaavio-teht-maksukortti.png">
  </p>

  <p>
    Tässä tehtäväsäsarjassa tehdään luokka <code>Maksukortti</code>, jonka tarkoituksena on jäljitellä Unicafeissa tapahtuvaa maksutoimintaa.
  </p>

  <h2>Luokan runko</h2>

  <p>
    Projektiin tulee kuulumaan kaksi kooditiedostoa:
  </p>

  <p>
    Tehtäväpohjan mukana tulee kooditiedosto <code>Paaohjelma</code> jonka sisällä on <code>main</code>-metodi.
  </p>

  <p>
    Lisää projektiin uusi luokka nimeltä <code>Maksukortti</code>. Uuden luokan saa lisättyä seuraavasti: Ruudun vasemmalla reunalla on projektilistaus. Paina projektin nimen kohdalla hiiren oikeaa nappia. Valitse avautuvasta valikosta <em>New</em> ja <em>Java Class</em>. Anna luokan nimeksi (Class Name) <code>Maksukortti</code>.
  </p>

  <p>
    Tee ensin <code>Maksukortti</code>-olion konstruktori, jolle annetaan kortin alkusaldo ja joka tallentaa sen olion sisäiseen muuttujaan. Tee sitten <code>toString</code>-metodi, joka palauttaa kortin saldon muodossa "Kortilla on rahaa X euroa".
  </p>

  <p>
    Seuraavassa on luokan <code>Maksukortti</code> runko:
  </p>

  <% partial 'partials/code_highlight' do %>
    public class Maksukortti {
    private double saldo;

    public Maksukortti(double alkusaldo) {
    // kirjoita koodia tähän
    }

    public String toString() {
    // kirjoita koodia tähän
    }
    }
  <% end %>

  <p>
    Seuraava pääohjelma testaa luokkaa:
  </p>

  <% partial 'partials/code_highlight' do %>
    public class Paaohjelma {
    public static void main(String[] args) {
    Maksukortti kortti = new Maksukortti(50);
    System.out.println(kortti);
    }
    }
  <% end %>


  <p>
    Ohjelman tulisi tuottaa seuraava tulostus:
  </p>

  <% partial 'partials/sample_output' do %>
    Kortilla on rahaa 50.0 euroa
  <% end %>


  <h2>Kortilla maksaminen</h2>

  <p>
    Täydennä <code>Maksukortti</code>-luokkaa seuraavilla metodeilla:
  </p>

  <% partial 'partials/code_highlight' do %>
    public void syoEdullisesti() {
    // kirjoita koodia tähän
    }

    public void syoMaukkaasti() {
    // kirjoita koodia tähän
    }
  <% end %>

  <p>
    Metodin <code>syoEdullisesti</code> tulisi vähentää kortin saldoa 2.60 eurolla ja metodin <code>syoMaukkaasti</code> tulisi vähentää kortin saldoa 4.60 eurolla.
  </p>

  <p>
    Seuraava pääohjelma testaa luokkaa:
  </p>

  <% partial 'partials/code_highlight' do %>
    public class Paaohjelma {
    public static void main(String[] args) {
    Maksukortti kortti = new Maksukortti(50);
    System.out.println(kortti);

    kortti.syoEdullisesti();
    System.out.println(kortti);

    kortti.syoMaukkaasti();
    kortti.syoEdullisesti();
    System.out.println(kortti);
    }
    }
  <% end %>

  <p>
    Ohjelman tulisi tuottaa kutakuinkin seuraava tulostus:
  </p>

  <% partial 'partials/sample_output' do %>
    Kortilla on rahaa 50.0 euroa
    Kortilla on rahaa 47.4 euroa
    Kortilla on rahaa 40.199999999999996 euroa
  <% end %>


  <h2>Ei-negatiivinen saldo</h2>

  <p>
    Mitä tapahtuu, jos kortilta loppuu raha kesken? Ei ole järkevää, että saldo muuttuu negatiiviseksi. Muuta metodeita <code>syoEdullisesti</code> ja <code>syoMaukkaasti</code> niin, että ne eivät vähennä saldoa, jos saldo menisi negatiiviseksi.
  </p>

  <p>
    Seuraava pääohjelma testaa luokkaa:
  </p>

  <% partial 'partials/code_highlight' do %>
    public class Paaohjelma {
    public static void main(String[] args) {
    Maksukortti kortti = new Maksukortti(5);
    System.out.println(kortti);

    kortti.syoMaukkaasti();
    System.out.println(kortti);

    kortti.syoMaukkaasti();
    System.out.println(kortti);
    }
    }
  <% end %>

  <p>
    Ohjelman tulisi tuottaa seuraava tulostus:
  </p>

  <% partial 'partials/sample_output' do %>
    Kortilla on rahaa 5.0 euroa
    Kortilla on rahaa 0.40000000000000036
    Kortilla on rahaa 0.40000000000000036
  <% end %>


  <p>
    Yllä toinen metodin <code>syoMaukkaasti</code> kutsu ei vaikuttanut saldoon, koska saldo olisi mennyt negatiiviseksi.
  </p>

  <h2>Kortin lataaminen</h2>

  <p>
    Lisää <code>Maksukortti</code>-luokkaan seuraava metodi:
  </p>

  <% partial 'partials/code_highlight' do %>
    public void lataaRahaa(double rahamaara) {
    // kirjoita koodia tähän
    }
  <% end %>

  <p>
    Metodin tarkoituksena on kasvattaa kortin saldoa parametrina annetulla rahamäärällä. Kuitenkin kortin saldo saa olla korkeintaan 150 euroa, joten jos ladattava rahamäärä ylittäisi sen, saldoksi tulisi tulla silti tasan 150 euroa.
  </p>

  <p>
    Seuraava pääohjelma testaa luokkaa:
  </p>

  <% partial 'partials/code_highlight' do %>
    public class Paaohjelma {
    public static void main(String[] args) {
    Maksukortti kortti = new Maksukortti(10);
    System.out.println(kortti);

    kortti.lataaRahaa(15);
    System.out.println(kortti);

    kortti.lataaRahaa(10);
    System.out.println(kortti);

    kortti.lataaRahaa(200);
    System.out.println(kortti);
    }
    }
  <% end %>

  <p>
    Ohjelman tulisi tuottaa seuraava tulostus:
  </p>

  <% partial 'partials/sample_output' do %>
    Kortilla on rahaa 10.0 euroa
    Kortilla on rahaa 25.0 euroa
    Kortilla on rahaa 35.0 euroa
    Kortilla on rahaa 150.0 euroa
  <% end %>


  <h2>Kortin lataus negatiivisella arvolla</h2>

  <p>
    Muuta metodia <code>lataaRahaa</code> vielä siten, että jos yritetään ladata negatiivinen rahamäärä, ei kortilla oleva arvo muutu.
  </p>

  <p>
    Seuraava pääohjelma testaa luokkaa:
  </p>

  <% partial 'partials/code_highlight' do %>
    public class Paaohjelma {
    public static void main(String[] args) {
    Maksukortti kortti = new Maksukortti(10);
    System.out.println("Pekka: " + kortti);
    kortti.lataaRahaa(-15);
    System.out.println("Pekka: " + kortti);
    }
    }
  <% end %>

  <p>
    Ohjelman tulisi tuottaa seuraava tulostus:
  </p>

  <% partial 'partials/sample_output' do %>
    Pekka: Kortilla on rahaa 10.0 euroa
    Pekka: Kortilla on rahaa 10.0 euroa
  <% end %>


  <h2>Monta korttia</h2>

  <p>
    Tee pääohjelma, joka sisältää seuraavan tapahtumasarjan:
  </p>

  <ul>
    <li> Luo Pekan kortti. Kortin alkusaldo on 20 euroa</li>
    <li> Luo Matin kortti. Kortin alkusaldo on 30 euroa</li>
    <li> Pekka syö maukkaasti</li>
    <li> Matti syö edullisesti</li>
    <li> Korttien arvot tulostetaan (molemmat omalle rivilleen, rivin alkuun kortin omistajan nimi)</li>
    <li> Pekka lataa rahaa 20 euroa</li>
    <li> Matti syö maukkaasti</li>
    <li> Korttien arvot tulostetaan (molemmat omalle rivilleen, rivin alkuun kortin omistajan nimi)</li>
    <li> Pekka syö edullisesti</li>
    <li> Pekka syö edullisesti</li>
    <li> Matti lataa rahaa 50 euroa</li>
    <li> Korttien arvot tulostetaan (molemmat omalle rivilleen, rivin alkuun kortin omistajan nimi)</li>
  </ul>

  <p>
    Pääohjelman runko on seuraava:
  </p>


  <% partial 'partials/code_highlight' do %>
    public class Main {
    public static void main(String[] args) {
    Maksukortti pekanKortti = new Maksukortti(20);
    Maksukortti matinKortti = new Maksukortti(30);

    // kirjoita koodia tähän
    }
    }
  <% end %>

  <p>
    Ohjelman tulisi tuottaa seuraava tulostus:
  </p>

  <% partial 'partials/sample_output' do %>
    Pekka: Kortilla on rahaa 15.4 euroa
    Matti: Kortilla on rahaa 27.4 euroa
    Pekka: Kortilla on rahaa 35.4 euroa
    Matti: Kortilla on rahaa 22.799999999999997 euroa
    Pekka: Kortilla on rahaa 30.199999999999996 euroa
    Matti: Kortilla on rahaa 72.8 euroa
  <% end %>


<% end %>



<% partial 'partials/hint', locals: { name: 'Pyöristysvirheet' } do %>

  <p>
    Huomasit todennäköisesti, että osassa luvuista ilmenee pyöristysvirheitä. Esimerkiksi edellisessä tehtävässä Pekan saldo 30.7 saattaa tulostua muodossa <code>30.700000000000003</code>. Tämä liittyy siihen, että liukuluvut kuten <code>double</code> tallennetaan oikeasti binäärimuodossa, eli nollina ja ykkösinä vain rajattua määrää lukuja käyttäen.
  </p>

  <p>
    Koska liukulukuja on ääretön määrä (keksitkö miksi? kuinka monta liuku- tai desimaalilukua mahtuu vaikkapa lukujen 5 ja 6 väliin?), ei kaikkia liukulukuja yksinkertaisesti voi esittää rajatulla määrällä nollia ja ykkösiä. Tietokone joutuu siis rajoittamaan tallennustarkkuutta.
  </p>

  <p>
    Normaalisti esimerkiksi tilien saldot tallennetaan kokonaislukuina siten, että arvo 1 vastaa esimerkiksi yhtä senttiä.
  </p>
<% end %>




<% partial 'partials/material_sub_heading' do %>
  Metodin parametrit
<% end %>


<p>
  Jatketaan taas <code>Henkilo</code>-luokan parissa. Päätetään että haluamme laskea henkilöiden painoindeksejä. Tätä varten teemme henkilölle metodit pituuden ja painon asettamista varten, sekä metodin joka laskee painoindeksin. Henkilön uudet ja muuttuneet osat seuraavassa:
</p>

<% partial 'partials/code_highlight' do %>
  public class Henkilo {
  private String nimi;
  private int ika;
  private int paino;
  private int pituus;

  public Henkilo(String nimiAlussa) {
  this.ika = 0;
  this.paino = 0;
  this.pituus = 0;
  this.nimi = nimiAlussa;
  }

  public void setPituus(int uusiPituus) {
  this.pituus = uusiPituus;
  }

  public void setPaino(int uusiPaino) {
  this.paino = uusiPaino;
  }

  public double painoIndeksi() {
  double pituusPerSata = this.pituus / 100.0;
  return this.paino / (pituusPerSata * pituusPerSata);
  }

  // ...
  }
<% end %>

<p>
  Eli henkilölle lisättiin oliomuuttujat <code>pituus</code> ja <code>paino</code>. Näille voi asettaa arvon metodeilla <code>setPituus</code> ja <code>setPaino</code>. Jälleen käytössä Javaan vakiintunut nimeämiskäytäntö, eli jos metodin tehtävänä on ainoastaan asettaa arvo oliomuuttujaan, on metodi tapana nimetä <code>setMuuttujanNimi</code>:ksi. Arvon asettavia metodeja kutsutaan usein "settereiksi". Seuraavassa käytämme uusia metodeja:
</p>

<% partial 'partials/code_highlight' do %>
  public static void main(String[] args) {
  Henkilo matti = new Henkilo("Matti");
  Henkilo juhana = new Henkilo("Juhana");

  matti.setPituus(180);
  matti.setPaino(86);

  juhana.setPituus(175);
  juhana.setPaino(64);

  System.out.println(matti.getNimi() + ", painoindeksisi on " + matti.painoIndeksi());
  System.out.println(juhana.getNimi() + ", painoindeksisi on " + juhana.painoIndeksi());
  }
<% end %>

<p>
  Tulostus:
</p>

<% partial 'partials/sample_output' do %>
  Matti, painoindeksisi on 26.54320987654321
  Juhana, painoindeksisi on 20.897959183673468
<% end %>



<% partial 'partials/material_sub_heading' do %>
  Parametrilla ja oliomuuttujalla sama nimi!
<% end %>

<p>
  Edellä metodissa <code>setPituus</code> asetetaan oliomuuttujaan <code>pituus</code> parametrin <code>uusiPituus</code> arvo:
</p>


<% partial 'partials/code_highlight' do %>
  public void setPituus(int uusiPituus) {
  this.pituus = uusiPituus;
  }
<% end %>

<p>
  Parametrin nimi voisi olla myös sama kuin oliomuuttujan nimi, eli seuraava toimisi myös:
</p>

<% partial 'partials/code_highlight' do %>
  public void setPituus(int pituus) {
  this.pituus = pituus;
  }
<% end %>

<p>
  Nyt metodissa <code>pituus</code> tarkottaa nimenomaan <em>pituus</em>-nimistä parametria ja <code>this.pituus</code> saman nimistä oliomuuttujaa. Esim. seuraava ei toimisi sillä koodi ei viittaa ollenkaan oliomuuttujaan <em>pituus</em> -- koodi käytännössä asettaa parametrina saadulle <code>pituus</code>-muuttujalle siinä jo olevan arvon:
</p>

<% partial 'partials/code_highlight' do %>
  public void setPituus(int pituus) {
  // ÄLÄ TEE NÄIN!!!
  pituus = pituus;
  }
<% end %>

<% partial 'partials/code_highlight' do %>
  public void setPituus(int pituus) {
  // VAAN NÄIN!!!
  this.pituus = pituus;
  }
<% end %>



<% partial 'partials/exercise', locals: { name: 'Kertoja' } do %>

  <p>
    Luo luokka <code>Kertoja</code> jolla on:
  </p>

  <ul>
    <li>Konstruktori <code>public Kertoja(int luku)</code>.</li>
    <li>Metodi <code>public int kerro(int toinenLuku)</code> joka palauttaa sille annetun luvun <code>toinenLuku</code> kerrottuna konstruktorille annetulla luvulla <code>luku</code>.</li>
  </ul>

  <p>
    Esimerkki luokan käytöstä:
  </p>

  <% partial 'partials/code_highlight' do %>
    Kertoja kolmellaKertoja = new Kertoja(3);

    System.out.println("kolmellaKertoja.kerro(2): " + kolmellaKertoja.kerro(2));

    Kertoja neljallaKertoja = new Kertoja(4);

    System.out.println("neljallaKertoja.kerro(2): " + neljallaKertoja.kerro(2));
    System.out.println("kolmellaKertoja.kerro(1): " + kolmellaKertoja.kerro(1));
    System.out.println("neljallaKertoja.kerro(1): " + neljallaKertoja.kerro(1));
  <% end %>

  <p>
    Tulostus
  </p>

  <% partial 'partials/sample_output' do %>
    kolmellaKertoja.kerro(2): 6
    neljallaKertoja.kerro(2): 8
    kolmellaKertoja.kerro(1): 3
    neljallaKertoja.kerro(1): 4
  <% end %>

<% end %>




<% partial 'partials/material_sub_heading' do %>
  Oman metodin kutsu
<% end %>

<p>
  Olio voi kutsua myös omia metodeitaan. Jos esim. halutaan, että toString-metodin palauttama merkkijonoesitys kertoisi myös henkilön painoindeksin, kannattaa <code>toString</code>:istä kutsua olion omaa metodia <code>painoIndeksi</code>:
</p>

<% partial 'partials/code_highlight' do %>
  public String toString() {
  return this.nimi + ", ikä " + this.ika + " vuotta, painoindeksini on " + this.painoIndeksi();
  }
<% end %>

<p>
  Eli kun olio kutsuu omaa metodiaan, riittää etuliite this ja pelkkä metodin nimi. Vaihtoehtoinen tapa on tehdä oman metodin kutsu muodossa <code>painoIndeksi()</code> jolloin ei korosteta, että kutsutaan "olion itsensä" metodia painoindeksi:
</p>

<% partial 'partials/code_highlight' do %>
  public String toString() {
  return this.nimi + ", ikä " + this.ika + " vuotta, painoindeksini on " + painoIndeksi();
  }
<% end %>

<p>
  Olioscreencastin kolmas osa:
</p>

<a href="http://www.youtube.com/watch?feature=player_embedded&v=YKwzIGuCLn8" class="youtube" height="300" target="_blank" rel="noopener"><img src=" https://www.cs.helsinki.fi/group/java/k13/ohpe/img/youtube.jpg"/></a>


<p>
  &nbsp;
</p>

<% partial 'partials/exercise', locals: { name: 'Lukutilasto (4 osaa)' } do %>

  <h2>Lukujen määrä</h2>

  <p>
    Tee luokka <code>Lukutilasto</code> (tiedosto luomaasi luokkaa varten on tehtäväpohjassa valmiina), joka tuntee seuraavat toiminnot:
  </p>

  <ul>
    <li> metodi <code>lisaaLuku</code> lisää uuden luvun tilastoon</li>
    <li> metodi <code>haeLukujenMaara</code> kertoo lisättyjen lukujen määrän</li>
  </ul>

  <p>
    Luokan ei tarvitse tallentaa mihinkään lisättyjä lukuja, vaan riittää muistaa niiden määrä. Metodin <code>lisaaLuku</code> ei tässä vaiheessa tarvitse edes ottaa huomioon, mikä luku lisätään tilastoon, koska ainoa tallennettava asia on lukujen määrä.
  </p>

  <p>
    Luokan runko on seuraava:
  </p>

  <% partial 'partials/code_highlight' do %>
    public class Lukutilasto {
    private int lukujenMaara;

    public Lukutilasto() {
    // alusta tässä muuttuja lukujenMaara
    }

    public void lisaaLuku(int luku) {
    // kirjoita koodia tähän
    }

    public int haeLukujenMaara() {
    // kirjoita koodia tähän
    }
    }
  <% end %>

  <p>
    Seuraava ohjelma esittelee luokan käyttöä:
  </p>

  <% partial 'partials/code_highlight' do %>
    public class Paaohjelma {
    public static void main(String[] args) {
    Lukutilasto tilasto = new Lukutilasto();
    tilasto.lisaaLuku(3);
    tilasto.lisaaLuku(5);
    tilasto.lisaaLuku(1);
    tilasto.lisaaLuku(2);
    System.out.println("Määrä: " + tilasto.haeLukujenMaara());
    }
    }
  <% end %>

  <p>
    Ohjelman tulostus on seuraava:
  </p>

  <% partial 'partials/sample_output' do %>
    Määrä: 4
  <% end %>
  
  
  <h2>Summa ja keskiarvo</h2>
  
  <p>
    Laajenna luokkaa seuraavilla toiminnoilla:
  </p>

  <ul>
    <li> metodi <code>summa</code> kertoo lisättyjen lukujen summan (tyhjän lukutilaston summa on 0)</li>
    <li> metodi <code>keskiarvo</code> kertoo lisättyjen lukujen keskiarvon (tyhjän lukutilaston keskiarvo on 0)</li>
  </ul>

  <p>
    Luokan runko on seuraava:
  </p>

  <% partial 'partials/code_highlight' do %>
    public class Lukutilasto {
    private int lukujenMaara;
    private int summa;

    public Lukutilasto() {
    // alusta tässä muuttujat maara ja summa
    }

    public void lisaaLuku(int luku) {
    // kirjoita koodia tähän
    }

    public int haeLukujenMaara() {
    // kirjoita koodia tähän
    }

    public int summa() {
    // kirjoita koodia tähän
    }

    public double keskiarvo() {
    // kirjoita koodia tähän
    }
    }
  <% end %>

  <p>
    Seuraava ohjelma esittelee luokan käyttöä:
  </p>

  <% partial 'partials/code_highlight' do %>
    public class Main {
    public static void main(String[] args) {
    Lukutilasto tilasto = new Lukutilasto();
    tilasto.lisaaLuku(3);
    tilasto.lisaaLuku(5);
    tilasto.lisaaLuku(1);
    tilasto.lisaaLuku(2);
    System.out.println("Määrä: " + tilasto.haeLukujenMaara());
    System.out.println("Summa: " + tilasto.summa());
    System.out.println("Keskiarvo: " + tilasto.keskiarvo());
    }
    }
  <% end %>

  <p>
    Ohjelman tulostus on seuraava:
  </p>

  <% partial 'partials/sample_output' do %>
    Määrä: 4
    Summa: 11
    Keskiarvo: 2.75
  <% end %>


  <h2>Summa käyttäjältä</h2>

  <p>
    Tee ohjelma, joka kysyy lukuja käyttäjältä, kunnes käyttäjä antaa luvun -1. Sitten ohjelma ilmoittaa lukujen summan.
  </p>

  <p>
    Ohjelmassa tulee käyttää <code>Lukutilasto</code>-olioa summan laskemiseen.
  </p>

  <p>
    <strong>HUOM: </strong> älä muuta Lukutilasto-luokkaa millään tavalla!
  </p>

  <% partial 'partials/sample_output' do %>
    Anna lukuja:
    <font color="red">4</font>
    <font color="red">2</font>
    <font color="red">5</font>
    <font color="red">4</font>
    <font color="red">-1</font>
    Summa: 15
  <% end %>

  
  <h2>Monta summaa</h2>
  
  <p>
    Muuta edellistä ohjelmaa niin, että ohjelma laskee myös parillisten ja parittomien lukujen summaa.
  </p>

  <p>
    <b>HUOM</b>: Määrittele ohjelmassa <i>kolme</i> Lukutilasto-olioa ja laske ensimmäisen avulla kaikkien lukujen summa, toisen avulla parillisten lukujen summa ja kolmannen avulla parittomien lukujen summa.
  </p>

  <p>
    <b>Jotta testi toimisi, on oliot luotava pääohjelmassa edellä mainitussa järjestyksessä (eli ensin kaikkien summan laskeva olio, toisena parillisten summan laskeva ja viimeisenä parittomien summan laskeva olio)!</b>
  </p>

  <p>
    <strong>HUOM: </strong> älä muuta Lukutilasto-luokaa millään tavalla!
  </p>

  <p>
    Ohjelman tulee toimia seuraavasti:
  </p>

  <% partial 'partials/sample_output' do %>
    Anna lukuja:
    <font color="red">4</font>
    <font color="red">2</font>
    <font color="red">5</font>
    <font color="red">2</font>
    <font color="red">-1</font>
    Summa: 13
    Parillisten summa: 8
    Parittomien summa: 5
  <% end %>

<% end %>




<% partial 'partials/material_sub_heading' do %>
  Mistä olio-ohjelmoinnissa oikein on kyse: katsaus taaksepäin
<% end %>

<p>
  Olio-ohjelmoinnissa on kyse pitkälti käsitteiden eristämisestä omiksi kokonaisuuksikseen tai toisin ajatellen abstraktioiden muodostamisesta. Voisi ajatella, että on turhaa luoda oliota jonka sisällä on ainoastaan luku, sillä saman voisi tehdä suoraan <code>int</code>-muuttujilla. Asia ei kuitenkaan ole aina näin. Jos kello koostuu pelkästään kolmesta int-muuttujasta joita kasvatellaan, muuttuu ohjelma lukijan kannalta epäselvemmäksi, koodista on vaikea "nähdä" mistä on kysymys. Eräs <a href="https://en.wikipedia.org/wiki/Kent_Beck" target="_blank" rel="noopener">kuuluisa ohjelmoija</a> on sanonut <em>"Any fool can write code that a computer can understand.  Good programmers write code that humans can understand"</em>. Koska viisari on oma selkeä käsitteensä, kannattaa ohjelman ymmärrettävyyden parantamiseksi siitä tehdä oma luokka.
</p>

<p>
  Käsitteen erottaminen omaksi luokaksi on monellakin tapaa hyvä idea. Ensinnäkin tiettyjä yksityiskohtia (esim. laskurin pyörähtäminen) saadaan piilotettua luokan sisään (eli <em>abstrahoitua</em>). Sen sijaan että kirjoitetaan if-lause ja sijoitusoperaatio, riittää, että laskurin käyttäjä kutsuu selkeästi nimettyä metodia <code>seuraava()</code>. Aikaansaatu laskuri sopii kellon lisäksi ehkä muidenkin ohjelmien rakennuspalikaksi, eli selkeästä käsitteestä tehty luokka voi olla monikäyttöinen. Suuri etu saavutetaan myös sillä, että koska laskurin toteutuksen yksityiskohdat eivät näy laskurin käyttäjille, voidaan yksityiskohtia tarvittaessa muuttaa.
</p>

<p>
  Totesimme että kello sisältää kolme viisaria, eli koostuu kolmesta käsitteestä. Oikeastaan kello on itsekin käsite. Seuraavassa osiossa teemme myös luokan Kello, jotta voimme luoda selkeitä Kello-olioita. Kello tulee siis olemaan olio jonka toiminta perustuu "yksinkertaisimpiin" olioihin eli viisareihin. Tämä on juuri olio-ohjelmoinnin suuri idea: ohjelma rakennetaan pienistä selkeistä yhteistoiminnassa olevista olioista.
</p>

<p>
  Lausahdus <em>ohjelma rakennetaan pienistä selkeistä yhteistoiminnassa olevista olioista</em> tulee toistumaan kurssilla.
</p>



<% partial 'partials/material_heading' do %>
  Olio-ohjelmointi jatkuu
<% end %>

<p>
  Jatketaan edellisen osan olio-ohjelmointiteemalla ja kerrataan aluksi olio-ohjelmoinnin oleellisia käsitteitä. Yleisesti ottaen teemana on siis olio-ohjelmointi, missä on kyse käsiteltävän ongelma-alueen eristämistä omiksi erillisiksi kokonaisuuksikseen, joita käytetään yhteistoiminnassa ongelma-alueen ratkaisemiseksi.
</p>

<% partial 'partials/material_sub_heading' do %>
  Olio
<% end %>

<p>
  <strong>Olio</strong> on itsenäinen kokonaisuus, johon liittyy tietoa (oliomuuttujat) sekä käyttäytymistä (metodit). Oliot voivat olla hyvin erilaisia rakenteeltaan ja toiminnaltaan: jotkut voivat kuvata ongelma-alueen käsitteitä, ja jotkut voivat koordinoida olioiden välistä toimintaa. Olioiden kommunikointi tapahtuu metodikutsujen avulla -- metodikutsuilla sekä kysytään tietoa olioita että annetaan olioille käskyjä.
</p>

<p>
  Yleisesti ottaen jokaisella oliolla on selkeästi määritellyt rajat ja toiminnallisuudet, jonka lisäksi jokainen olio tietää vain niistä muista olioista, joita se tarvitsee tehtävänsä tekemiseen. Toisin sanoen, olio piilottaa oman sisäisen toimintansa ja tarjoaa pääsyn toiminnallisuuksiin selkeästi määriteltyjen metodien kautta. Tämän lisäksi olio on riippumaton niistä olioista, joita se ei tehtäväänsä tarvitse.
</p>

<p>
  Edellisessä osassa käsiteltiin Henkilö-oliota, jota varten luotiin Henkilö-luokka. Kertauksen vuoksi on hyvä muistella luokan tehtävää: <strong>luokka</strong> sisältää olioiden tekemiseen tarvittavat rakennuspiirrustukset sekä määrittelee olioiden muuttujat ja metodit. Olio luodaan luokassa olevan konstruktorin perusteella.
</p>

<p>
  Henkilö-olioomme liittyi nimi, ikä, paino ja pituus sekä muutamia metodeja. Jos mietimme henkilö-oliomme rakennetta tarkemmin, keksisimme varmaankin lisää henkilöihin liittyviä muuttujia kuten henkilöturvatunnus, puhelinnumero, osoite ja silmien väri. Pitäydytään toistaiseksi kuitenkin edellä mainituissa muuttujissa.
</p>

<p>
  Olion käyttäytyminen määräytyy metodien avulla. Todellisuudessa henkilöt voivat tehdä hyvin monia erilaisia asioita, mutta henkilöitä käsittelevää sovellusta rakennettaessa henkilöön liittyvät toiminnallisuudet rakennetaan ongelma-alueen perusteella. Esimerkiksi elämänhallintaan tarkoitettu sovellus voisi pitää kirjaa edellä mainituista iästä, painosta ja pituudesta, sekä tarjota mahdollisuuden painoindeksin ja maksimisykkeen laskemiseen.
</p>

<p>
  Oliot tarjoavat tyypillisesti pääsyn myös niiden tilaan. <strong>Olion tila</strong> on sen oliomuuttujien arvo kullakin ajanhetkellä. 
</p>

<p>
  Java-ohjelmointikielellä Henkilö-olion, joka pitää kirjaa nimestä, iästä, painosta ja pituudesta, sekä tarjoaa mahdollisuuden painoindeksi ja maksimisykkeen laskemiseen näyttäisi esimerkiksi seuraavalta. Huomaa, että alla oleva esimerkki poikkeaa hieman edellisessä osassa käytetystä esimerkistä. Alla pituus ja paino ilmaistaan doubleina -- pituuden yksikkö on metri.
</p>

<% partial 'partials/code_highlight' do %>
  public class Henkilo {
      private String nimi;
      private int ika;
      private double paino;
      private double pituus;

      public Henkilo(String nimi, int ika, double paino, double pituus) {
          this.nimi = nimi;
          this.ika = ika;
          this.paino = paino;
          this.pituus = pituus;
      }

      public double painoindeksi() {
          return this.paino / (this.pituus * this.pituus);
      }

      public double maksimisyke() {
          return 206.3 - (0.711 * this.ika);
      }

      public String toString() {
          return this.nimi + ", BMI: " + this.painoindeksi()
              + ", maksimisyke: " + this.maksimisyke();
      }
  }
<% end %>

<p>
  Annetun henkilön maksimisykkeen ja painoindeksin selvittäminen on suoraviivaista edellä kuvatun Henkilo-luokan avulla.
</p>

<% partial 'partials/code_highlight' do %>
  Scanner lukija = new Scanner(System.in);
  System.out.println("Mikä on nimesi?");
  String nimi = lukija.nextLine();
  System.out.println("Mikä on ikäsi?");
  int ika = Integer.parseInt(lukija.nextLine());
  System.out.println("Mikä on painosi?");
  double paino = Double.parseDouble(lukija.nextLine());
  System.out.println("Mikä on pituutesi?");
  double pituus = Double.parseDouble(lukija.nextLine());

  Henkilo henkilo = new Henkilo(nimi, ika, paino, pituus);
  System.out.println(henkilo);
<% end %>

<% partial 'partials/sample_output' do %>
  Mikä on nimesi?
  <font color="red">Napoleone Buonaparte</font>
  Mikä on ikäsi?
  <font color="red">51</font>
  Mikä on painosi?
  <font color="red">80</font>
  Mikä on pituutesi?
  <font color="red">1.70</font>
  Napoleone Buonaparte, BMI: 27.68166089965398, maksimisyke: 170.03900000000002
<% end %>



<% partial 'partials/material_sub_heading' do %>
  Luokka
<% end %>

<p>
  Luokka määrittelee minkälaisia olioita siitä voidaan luoda. Se sisältää olion tietoa kuvaavat oliomuuttujat, olion luomiseen käytettävän konstruktorin tai konstruktorit, sekä olion käyttäytymisen määrittelevät metodit. Alla on kuvattuna luokka Suorakulmio, joka määrittelee eräänlaisen suorakulmion toiminnallisuuden-
</p>

<% partial 'partials/code_highlight' do %>
  // luokka
  public class Suorakulmio {

      // oliomuuttujat
      private int leveys;
      private int korkeus;

      // konstruktori
      public Suorakulmio(int leveys, int korkeus) {
          this.leveys = leveys;
          this.korkeus = korkeus;
      }

      // metodit
      public void levenna() {
          this.leveys++;
      }

      public void kavenna() {
          if (this.leveys > 0) {
              this.leveys--;
          }
      }

      public int pintaAla() {
          return this.leveys * this.korkeus;
      }

      public String toString() {
          return "(" + this.leveys + ", " + this.korkeus + ")";
      }
  }
<% end %>

<p>
  Osa edellä määritellyistä metodeista ei palauta arvoa (metodit, joiden määrittelyssä käytetään avainsanaa void), ja osa metodeista palauttaa arvon (metodit, joiden määrittelyssä kerrotaan palautettavan muuttujan tyyppi). Yllä olevassa luokassa on määriteltynä myös metodi toString, jota käytetään olion sisäisen tilan tulostamiseen.
</p>

<p>
  Luokasta luodaan olioita konstruktorin avulla new-komennolla. Alla luodaan kaksi suorakulmiota ja tulostaan niihin liittyvää tietoa.
</p>

<% partial 'partials/code_highlight' do %>
  Suorakulmio eka = new Suorakulmio(40, 80);
  Suorakulmio nelio = new Suorakulmio(10, 10);
  System.out.println(eka);
  System.out.println(nelio);

  eka.kavenna();
  System.out.println(eka);
  System.out.println(eka.pintaAla());
<% end %>

<% partial 'partials/sample_output' do %>
  (40, 80)
  (10, 10)
  (39, 80)
  3920
<% end %>



<% partial 'partials/exercise', locals: { name: 'Kirja' } do %>

  <p>
    Luo luokka <code>Kirja</code>, joka esittää fyysistä kirjaa. Jokaisella kirjalla on kirjailija, nimi ja sivujen lukumäärä.
  </p>
  
  <p>
    Luokalla tulee olla:
  </p>
  
  <ul>
    <li>Konstruktori <code>public Kirja(String kirjailija, String nimi, int sivuja)</code></li>
    <li>Metodi <code>public String getKirjailija()</code> joka palauttaa kirjan kirjailijan nimen.</li>
    <li>Metodi <code>public String getNimi()</code> joka palauttaa kirjan nimen.</li>
    <li>Metodi <code>public int getSivuja()</code> joka palauttaa kirjan sivujen lukumäärän.</li>
    <li>Tee kirjalle lisäksi <code>public String toString()</code>-metodi, jota käytetään kirja-olion tulostamiseen. Metodin kutsun tulee tuottaa esimerkiksi seuraavanlainen tulostus:
      
      <% partial 'partials/sample_output' do %>
J. K. Rowling, Harry Potter ja viisasten kivi, 223 sivua
      <% end %>
      
    </li>
  </ul>
<% end %>



<% partial 'partials/exercise', locals: { name: 'Karvosen kaava' } do %>

  <p>
    <a href="https://fi.wikipedia.org/wiki/Karvosen_kaava" target="_blank" norel>Karvosen kaavan</a> avulla voidaan laskea tavoitesyke fyysistä harjoittelua varten. Tavoitesykkeen laskeminen perustuu kaavaan <code>(maksimisyke - leposyke) * (tavoitesyke) + leposyke</code>, missä tavoitesyke annetaan prosenttina maksimisykkeestä.
  </p>

  <p>
    Esimerkiksi, jos henkilön maksimisyke on 200, leposyke 50, ja tavoitesyke 75% maksimisykkeestä, on tavoiteltava sydämen syke noin 162.5 lyöntiä minuutissa.
  </p>

  <p>
    Luo luokka <code>Harjoitusapuri</code>, jolle annetaan konstruktorin parametrina ikä ja leposyke. Harjoitusapurin tulee tarjota metodi tavoitesyke, jolle annetaan parametrina prosentuaalista maksimisykkeen osuutta kuvaava double-tyyppinen luku. Osuus annetaan lukuna nollan ja yhden välillä. Luokalla tulee olla:
  </p>

  <ul>
    <li>Konstruktori <code>public Harjoitusapuri(int ika, int leposyke)</code></li>
    <li>Metodi <code>public double tavoitesyke(double prosenttiaMaksimista)</code>, joka laskee ja palauttaa tavoiteltavan sykkeen.</li>
  </ul>

  <p>
    Käytä maksimisykkeen laskemiseen kaavaa <code>206.3 - (0.711 * ikä)</code>.
  </p>

  <p>
    Käyttöesimerkki:
  </p>
  
  
  <% partial 'partials/code_highlight' do %>
    Harjoitusapuri apuri = new Harjoitusapuri(30, 60);

    double prosenttiosuus = 0.5;

    while (prosenttiosuus &lt; 1.0) {
        double tavoite = apuri.tavoitesyke(prosenttiosuus);
        System.out.println("Tavoite " + (prosenttiosuus * 100) + "% maksimista: " + tavoite);
        prosenttiosuus += 0.1;
    }
  <% end %>
  
  <% partial 'partials/sample_output' do %>
    Tavoite 50.0% maksimista: 122.48500000000001
    Tavoite 60.0% maksimista: 134.98200000000003
    Tavoite 70.0% maksimista: 147.479
    Tavoite 80.0% maksimista: 159.976
    Tavoite 89.99999999999999% maksimista: 172.473
    Tavoite 99.99999999999999% maksimista: 184.97000000000003
  <% end %>

  <p>
    Huom! Tehtäväpohjassa ei ole testejä. Testaa sovellusta käsin ja palauta sovellus kun se toimii halutusti.
  </p>
  
<% end %>




<% partial 'partials/material_sub_heading' do %>
  Olio-ohjelmoinnin periaatteet
<% end %>

<p>
  Olio-ohjelmointiin kuuluu oleellisesti kolme periaatetta: abstrahointi, kapselointi ja perintä. Käsittelemme periaatteet tässä lyhyesti; perintään tutustutaan tarkemmin ohjelmoinnin jatkokurssille.
</p>


<% partial 'partials/material_sub_sub_heading' do %>
  Abstrahointi
<% end %>

<p>
  Abstrahoinnin tavoitteena on ongelma-alueen käsitteellistäminen. Ohjelmoija pyrkii nimeämään ongelma-alueen käsitteitä kuvaavat luokat, oliot, metodit ja muuttujat mahdollisimman hyvin, jolloin muut näitä käyttävät ohjelmoijat ymmärtävät mistä kussakin on kyse. 
</p>

<p>
  Käytännössä kyse on siis prosessista, missä ongelma-alueesta tunnistetaan ja eristetään oleellisimmat piirteet, joiden perusteella niistä luodaan ohjelmaan toiminnallisuutta. Samalla pyritään tilanteeseen, missä ongelma-alueesta on poimittu vain ne käsitteet, jotka ovat oleellisia käsiteltävän ongelman ratkaisun kannalta.
</p>

<p>
  <em>
    Otetaan analogia tosielämästä ja puhutaan käsitteestä auto. Jokainen tietää mistä autossa on kyse ja mihin sitä käytetään. Moni pystyisi myös piirtämään auton pyydettäessä. Käsite auto kuitenkin piilottaa paljon pienempiä osia: autossa on esimerkiksi renkaat, runko, moottori, istuimia, ... Kukin näistä käsitteistä on myös oma abstraktionsa. Esimerkiksi rengas piilottaa myös pienempiä osia -- renkaalla on vanne, ulkokumi, sisäkumi, jnejne.
  </em>
</p>

<p>
  Abstrahoinnista on ohjelmoijalle useita etuja. Se helpottaa asioista puhumista ja sitä kautta niiden käsittelyä. Se helpottaa ohjelmointia -- esimerkiksi käyttämämme apukirjastot kuten Scanner ovat toisten tekemiä valmiita abstraktioita ohjelmointiin liittyvistä tyypillisistä ongelmista. Se myös helpottaa omaa ohjelmointiamme: aivan kuten auto koostuu useammasta pienemmästä osasta, voimme koostaa ohjelmamme useammasta abstraktiosta ja luoda tätä kautta uusia abstraktioita.
</p>


<% partial 'partials/material_sub_sub_heading' do %>
  Kapselointi
<% end %>

<p>
  Kapseloinissa on kyse toteutuksen piilottamisesta julkisen rajapinnan taakse. Käytännössä olio-ohjelmoinissa kyse on muuttujien ja metodien konkreettisen toiminnallisuuden piilottamisesta olion "sisään". Olion käyttöön tarvittavat metodit (ml. konstruktorit) -- eli rajapinta -- ovat käyttäjän nähtävissä, mutta käyttäjä ei pääse käsiksi olion sisäiseen toteutukseen.
</p>

<p>
  Tällöin toiset oliot voivat kutsua olion metodeja ilman, että niiden tarvitsee tietää kutsuttavan olion sisäisestä tilasta tai metodien konkreettisesta toteutuksesta. Tällöin kukin olio on myös itsenäinen, eikä niiden sisäinen tila ole riippuvainen toisten olioiden sisäisestä tilasta.
</p>


<% partial 'partials/material_sub_sub_heading' do %>
  Perintä
<% end %>

<p>
  Olio-ohjelmoinnissa on mahdollista luoda luokkia, jotka perivät toisen luokan ominaisuuksia (eli oliomuuttujat ja metodit). Tällöin luokasta tehdyt oliot ovat samalla myös perityn luokan ilmentymiä, jolloin oliot voivat esiintyä useampina erilaisina olioina käyttötarpeesta riippuen.
</p>

<p>
  <em>
    Palaamme perintään ohjelmoinnin jatkokurssilla...
  </em>
</p>




<% partial 'partials/exercise', locals: { name: 'Kello laskurin avulla (4 osaa)' } do %>

  <p>
    Tässä tehtävässä tehdään luokka <code>YlhaaltaRajoitettuLaskuri</code> ja sovelletaan sitä kellon tekemiseen.
  </p>

  <h2>Rajoitettu laskuri</h2>

  <p>
    Tehdään luokka <code>YlhaaltaRajoitettuLaskuri</code>. Luokan olioilla on seuraava toiminnallisuus:
  </p>

  <ul>
    <li>Laskurilla on oliomuuttuja, joka muistaa laskurin arvon. Laskurin arvo on luku väliltä 0...yläraja.</li>
    <li>Aluksi laskurin arvo on 0.</li>
    <li>Olion konstruktori määrittää laskurin ylärajan.</li>
    <li>Metodi <code>seuraava</code> kasvattaa laskurin arvoa. Mutta jos laskurin arvo ylittää ylärajan, sen arvoksi tulee 0.</li>
    <li> Metodi <code>toString</code> palauttaa laskurin arvon merkkijonona.</li>
  </ul>

  <p>
    Tehtäväpohjassa on valmiina pääohjelmaa varten tiedosto <code>Paaohjelma</code>. Aloita tekemällä luokka <code>YlhaaltaRajoitettuLaskuri</code> vastaavasti kuin Maksukortti-tehtävässä. Näin tehdään myös tulevissa tehtäväsarjoissa.
  </p>

  <p>
    Luokan rungoksi tulee seuraava:
  </p>

  <% partial 'partials/code_highlight' do %>
    public class YlhaaltaRajoitettuLaskuri {
        private int arvo;
        private int ylaraja;

        public YlhaaltaRajoitettuLaskuri(int ylarajanAlkuarvo) {
           // kirjoita koodia tähän
        }

        public void seuraava() {
            // kirjoita koodia tähän
        }

        public String toString() {
            // kirjoita koodia tähän
        }
    }
  <% end %>

  <p>
    <b>Vihje</b>: et voi palauttaa toStringissä suoraan kokonaislukutyyppisen oliomuuttujan <code>laskuri</code> arvoa. Kokonaislukumuuttujasta <code>arvo</code> saa merkkijonomuodon esim. lisäämällä sen eteen tyhjän merkkijonon eli kirjoittamalla <code>"" + arvo</code>.
  </p>

  <p>
    Seuraavassa on pääohjelma, joka käyttää laskuria:
  </p>

  <% partial 'partials/code_highlight' do %>
    public class Paaohjelma {
        public static void main(String[] args) {
            YlhaaltaRajoitettuLaskuri laskuri = new YlhaaltaRajoitettuLaskuri(4);
            System.out.println("arvo alussa: " + laskuri);

            int i = 0;
            while (i &lt; 10) {
                laskuri.seuraava();
                System.out.println("arvo: " + laskuri);
                i++;
            }
        }
    }
  <% end %>

  <p>
    Laskurille asetetaan konstruktorissa ylärajaksi 4, joten laskurin arvo on luku 0:n ja 4:n väliltä. Huomaa, miten metodi <code>seuraava</code> vie laskurin arvoa eteenpäin, kunnes se pyörähtää 4:n jälkeen 0:aan:
  </p>

  <p>
    Ohjelman tulostuksen tulisi olla seuraava:
  </p>

  <% partial 'partials/sample_output' do %>
    arvo alussa: 0
    arvo: 1
    arvo: 2
    arvo: 3
    arvo: 4
    arvo: 0
    arvo: 1
    arvo: 2
    arvo: 3
    arvo: 4
    arvo: 0
  <% end %>


  <h2>Etunolla tulostukseen</h2>

  <p>
    Tee <code>toString</code>-metodista sellainen, että se lisää arvon merkkijonoesitykseen etunollan, jos laskurin arvo on vähemmän kuin 10. Eli jos laskurin arvo on esim. 3, palautetaan merkkijono "03", jos arvo taas on esim. 12, palautetaan normaaliin tapaan merkkijono "12".
  </p>

  <p>
    Muuta pääohjelma seuraavaan muotoon ja varmista, että tulos on haluttu.
  </p>

  <% partial 'partials/code_highlight' do %>
    public class Paaohjelma {
        public static void main(String[] args) {
            YlhaaltaRajoitettuLaskuri laskuri = new YlhaaltaRajoitettuLaskuri(14);
            System.out.println("arvo alussa: " + laskuri);

            int i = 0;
            while (i &lt; 16) {
                laskuri.seuraava();
                System.out.println("arvo: " + laskuri);
                i++;
            }
        }
    }
  <% end %>

  <% partial 'partials/sample_output' do %>
    arvo alussa: 00
    arvo: 01
    arvo: 02
    arvo: 03
    arvo: 04
    arvo: 05
    arvo: 06
    arvo: 07
    arvo: 08
    arvo: 09
    arvo: 10
    arvo: 11
    arvo: 12
    arvo: 13
    arvo: 14
    arvo: 00
    arvo: 01
  <% end %>


  <h2>Kello, ensimmäinen versio</h2>

  <p>
    Käyttämällä kahta laskuria voimme muodostaa kellon. Tuntimäärä on laskuri, jonka yläraja on 23, ja minuuttimäärä on laskuri jonka yläraja on 59. Kuten kaikki tietävät, kello toimii siten, että aina kun minuuttimäärä pyörähtää nollaan, tuntimäärä kasvaa yhdellä.
  </p>

  <p>
    Tee ensin laskurille metodi <code>arvo</code>, joka palauttaa laskurin arvon:
  </p>

  <% partial 'partials/code_highlight' do %>
    public int arvo() {
        // kirjoita koodia tähän
    }
  <% end %>

  <p>
    Tee sitten kello täydentämällä seuraava pääohjelmarunko (kopioi tämä pääohjelmaksesi sekä täydennä tarvittavilta osin kommenttien ohjaamalla tavalla):
  </p>

  <% partial 'partials/code_highlight' do %>
    public class Paaohjelma {
        public static void main(String[] args) {
            YlhaaltaRajoitettuLaskuri minuutit = new YlhaaltaRajoitettuLaskuri(59);
            YlhaaltaRajoitettuLaskuri tunnit = new YlhaaltaRajoitettuLaskuri(23);

            int i = 0;
            while (i &lt; 121) {
                System.out.println(tunnit + ":" + minuutit);   // tulostetaan nykyinen aika
                // minuuttimäärä kasvaa
                // jos minuuttimäärä menee nollaan, tuntimäärä kasvaa

                i++;
            }
        }
    }
  <% end %>

  <p>
    Jos kellosi toimii oikein, sen tulostus näyttää suunnilleen seuraavalta:
  </p>

  <% partial 'partials/sample_output' do %>
    00:00
    00:01
    ...
    00:59
    01:00
    01:01
    01:02
    ...
    01:59
    02:00
  <% end %>


  <h2>Kello, toinen versio</h2>

  <p>
    Laajenna kelloasi myös sekuntiviisarilla. Tee lisäksi luokalle <code>YlhaaltaRajoitettuLaskuri</code> metodi <code>asetaArvo</code>, jolla laskurille pystyy asettamaan halutun arvon -- jos et ole ihan varma mitä tässä pitäisi tehdä, kertaa materiaalista kohta missä puhutaan "settereistä".
  </p>

  <p>
    Jos laskurille yritetään asettaa kelvoton arvo eli negatiivinen luku tai ylärajaa suurempi luku, ei laskurin arvo muutu.
  </p>

  <p>
    Tämän metodin avulla voit muuttaa kellon ajan heti ohjelman alussa haluamaksesi.
  </p>

  <p>
    Voit testata kellon toimintaa seuraavalla ohjelmalla
  </p>

  <% partial 'partials/code_highlight' do %>
    import java.util.Scanner;

    public class Paaohjelma {
        public static void main(String[] args)  {
            Scanner lukija = new Scanner(System.in);
            YlhaaltaRajoitettuLaskuri sekunnit = new YlhaaltaRajoitettuLaskuri(59);
            YlhaaltaRajoitettuLaskuri minuutit = new YlhaaltaRajoitettuLaskuri(59);
            YlhaaltaRajoitettuLaskuri tunnit = new YlhaaltaRajoitettuLaskuri(23);

            System.out.print("sekunnit: ");
            int sek = // kysy sekuntien alkuarvo käyttäjältä
            System.out.print("minuutit: ");
            int min = // kysy minuuttien alkuarvo käyttäjältä
            System.out.print("tunnit: ");
            int tun = // kysy tuntien alkuarvo käyttäjältä

            sekunnit.asetaArvo(sek);
            minuutit.asetaArvo(min);
            tunnit.asetaArvo(tun);

            int i = 0;
            while (i &lt; 121) {
                // lisää edelliseen myös sekuntiviisari
                i++;
            }

        }
    }
  <% end %>


  <p>
    Kokeile laittaa kellosi alkamaan ajasta <i>23:59:50</i> ja varmista, että vuorokauden vaihteessa kello toimii odotetusti!
  </p>

  <p>
    <strong>Bonus-tehtävä: ikuisesti käyvä kello (tehtävää ei palauteta!)</strong>
  </p>

  <p>
    Ennen kuin alat tekemään tätä tehtävää, palauta jo tekemäsi kello!
  </p>

  <p>
    Muuta pääohjelmasi seuraavaan muotoon:
  </p>

  <% partial 'partials/code_highlight' do %>
    public class Paaohjelma {
        public static void main(String[] args) throws Exception {
            YlhaaltaRajoitettuLaskuri sekunnit = new YlhaaltaRajoitettuLaskuri(59);
            YlhaaltaRajoitettuLaskuri minuutit = new YlhaaltaRajoitettuLaskuri(59);
            YlhaaltaRajoitettuLaskuri tunnit = new YlhaaltaRajoitettuLaskuri(23);

            sekunnit.asetaArvo(50);
            minuutit.asetaArvo(59);
            tunnit.asetaArvo(23);

            while (true) {
                System.out.println(tunnit + ":" + minuutit + ":" + sekunnit);
                Thread.sleep(1000);
                // lisää kellon aikaa sekunnilla eteenpäin
            }
        }
    }
  <% end %>

  <p>
    Nyt kello käy ikuisesti ja kasvattaa arvoaan sekunnin välein. Sekunnin odotus tapahtuu komennolla <code>Thread.sleep(1000);</code>, komennon parametri kertoo nukuttavan ajan millisekunteina. Jotta komento toimisi, pitää main:in esittelyriville tehdä pieni lisäys: <code>public static void main(String[] args) <b>throws Exception</b> {</code>, eli tummennettuna oleva <code>throws Exception</code>.
  </p>

  <p>
    Saat ohjelman lopetettua painamalla NetBeans-konsolin (eli sen osan johon kello tulostaa arvonsa) vasemmalla laidalla olevasta punaisesta laatikosta.
  </p>

<% end %>






<% partial 'partials/material_heading' do %>
  Oliot ja viitteet
<% end %>


<p>
  Oletetaan, että käytössämme on alla oleva luokka.
</p>

<% partial 'partials/code_highlight' do %>
  public class Henkilo {

      private String nimi;
      private int ika;
      private int paino;
      private int pituus;

      public Henkilo(String nimi) {
          this.nimi = nimi;
          this.ika = 0;
          this.paino = 0;
          this.pituus = 0;
      }

      // muita konstruktoreja ja metodeja
      
      public String getNimi() {
          return this.nimi;
      }
      
      public int getIka() {
          return this.ika;
      }
      
      public void vanhene() {
          this.ika++;
      }
      
      public void setPituus(int uusiPituus) {
          this.pituus = uusiPituus;
      }
      
      public void setPaino(int uusiPaino) {
          this.paino = uusiPaino;
      }
      
      public double painoIndeksi() {
          double pituusPerSata = this.pituus / 100.0;
          return this.paino / (pituusPerSata * pituusPerSata);
      }
      
      @Override
      public String toString() {
          return this.nimi + ", ikä " + this.ika + " vuotta";
      }
  }
<% end %>

<p>
  Mitä oikein tapahtuu kun olio luodaan?
</p>


<% partial 'partials/code_highlight' do %>
Henkilo joan = new Henkilo("Joan Ball");
<% end %>

<p>
  Konstruktorikutsun <code>new</code> yhteydessä tapahtuu monta asiaa. Ensin tietokoneen muistista varataan tila oliomuuttujille. Tämän jälkeen oliomuuttujiin asetetaan oletus- tai alkuarvot (esimerkiksi int-tyyppisten muuttujien arvoksi tulee 0). Lopulta suoritetaan konstruktorissa oleva lähdekoodi.
</p>

<p>
  Konstruktorikutsu palauttaa viitteen olioon. <strong>Viite</strong> on tieto olioon liittyvien tietojen paikasta.
</p>

<img src="/img/drawings/olio-joan.png"/>

<p>
  Muuttujan arvoksi asetetaan siis viite, eli tieto olioon liittyvien tietojen paikasta. Yllä oleva kuva paljastaa myös sen, että nimi -- tai tarkemmin merkkijonot -- ovat myös olioita.
</p>

<% partial 'partials/material_sub_heading' do %>
  Muuttujan arvon asettaminen kopioi viitteen
<% end %>


<p>
  Lisätään ohjelmaan <code>Henkilo</code>-tyyppinen muuttuja <code>ball</code> ja annetaan sille alkuarvoksi <code>joan</code>. Mitä nyt tapahtuu?
</p>

<% partial 'partials/code_highlight' do %>
Henkilo joan = new Henkilo("Joan Ball");
System.out.println(joan);

Henkilo ball = joan;
<% end %>

<p>
  Lause <code>Henkilo ball = joan;</code> luo uuden henkilömuuttujan, jonka arvoksi kopioidaan muuttujan <code>joan</code> arvo. Tämä saa aikaan sen, että <code>ball</code> viittaa samaan olioon kuin <code>joan</code>.
</p>

<img src="/img/drawings/olio-joan-ja-ball.png"/>

<p>
  Tarkastellan samaa esimerkkiä hieman pidemmälle.
</p>

<% partial 'partials/code_highlight' do %>
Henkilo joan = new Henkilo("Joan Ball");
System.out.println(joan);

Henkilo ball = joan;
ball.vanhene();
ball.vanhene();

System.out.println(joan);
<% end %>

<% partial 'partials/sample_output' do %>
Joan Ball, ikä 0 vuotta
Joan Ball, ikä 2 vuotta
<% end %>


<p>
  Joan Ball -- eli henkilöolio, johon viite muuttujassa <code>joan</code> osoittaa -- on alussa 0-vuotias. Tämän jälkeen muuttujaan <code>ball</code> asetetaan (eli <strong>kopioidaan</strong>) muuttujan <code>joan</code> arvo. Henkilöoliota <code>ball</code> vanhennetaan kaksi vuotta ja sen seurauksena Joan Ball vanhenee!
</p>

<p>
  Olion sisäinen tila ei kopioidu muuttujan arvoa asetettaessa. Lauseessa <code>Henkilo ball = joan;</code> ei siis luoda henkilöä -- muuttujan ball arvoksi asetetaan kopio muuttujan joan arvosta, eli viite olioon.
</p>

<img src="/img/drawings/olio-joan-ja-ball-2.png"/>

<p>
  Seuraavassa esimerkkiä on jatkettu siten, että <code>joan</code>-muuttujaa varten luodaan uusi olio, jonka viite asetetaan muuttujan arvoksi. Muuttuja <code>ball</code> viittaa yhä aiemmin luotuun olioon.
</p>

<% partial 'partials/code_highlight' do %>
Henkilo joan = new Henkilo("Joan Ball");
System.out.println(joan);

Henkilo ball = joan;
ball.vanhene();
ball.vanhene();

System.out.println(joan);

joan = new Henkilo("Joan B.");
System.out.println(joan);
<% end %>

<p>
  Tulostuu:
</p>

<% partial 'partials/sample_output' do %>
Joan Ball, ikä 0 vuotta
Joan Ball, ikä 2 vuotta
Joan B., ikä 0 vuotta
<% end %>

<p>
  Muuttujassa <code>joan</code> on siis alussa viite yhteen olioon, mutta lopussa sen arvoksi on kopioitu toisen muuttujan viite. Seuraavassa kuva tilanteesta viimeisen koodirivin jälkeen.
</p>

<img src="/img/drawings/olio-joan-ja-ball-3.png"/>


<% partial 'partials/material_sub_heading' do %>
  Muuttujan arvo <code>null</code>
<% end %>


<p>
  Jatketaan vielä esimerkkiä asettamalla muuttujan <code>ball</code> arvoksi <code>null</code>, eli viite "ei mihinkään".
</p>

<% partial 'partials/code_highlight' do %>
Henkilo joan = new Henkilo("Joan Ball");
System.out.println(joan);

Henkilo ball = joan;
ball.vanhene();
ball.vanhene();

System.out.println(joan);

joan = new Henkilo("Joan B.");
System.out.println(joan);

ball = null;
<% end %>

<p>
  Viimeisen rivin jälkeen ohjelman tila on seuraavanlainen.
</p>

<img src="/img/drawings/olio-joan-ja-ball-null.png"/>

<p>
  Olioon, jonka nimi on Joan Ball, ei enää viittaa kukaan. Oliosta on siis tullut "roska". Java-ohjelmointikielessä ohjelmoijan ei tarvitse huolehtia ohjelman käyttämästä muistista. Javan automaattinen roskienkerääjä käy siivoamassa roskaksi joutuneet oliot aika ajoin. Jos automaattista roskien keruuta ei tapahtuisi, jäisivät roskaksi joutuneet oliot varaamaan muistia ohjelman suorituksen loppuun asti.
</p>

<p>
  Kokeillaan vielä mitä käy kun yritämme tulostaa muuttujaa, jonka arvona on viite "ei mihinkään" eli <code>null</code>.
</p>

<% partial 'partials/code_highlight' do %>
Henkilo joan = new Henkilo("Joan Ball");
System.out.println(joan);

Henkilo ball = joan;
ball.vanhene();
ball.vanhene();

System.out.println(joan);

joan = new Henkilo("Joan B.");
System.out.println(joan);

ball = null;
System.out.println(ball);
<% end %>


<% partial 'partials/sample_output' do %>
Joan Ball, ikä 0 vuotta
Joan Ball, ikä 2 vuotta
Joan B., ikä 0 vuotta
null
<% end %>

<p>
  Viitteen <code>null</code> tulostus tulostaa "null". Entäpä jos yritämme kutsua ei mihinkään viittaavan olion metodia, esimerkiksi metodia <code>vanhene</code>:
</p>

<% partial 'partials/code_highlight' do %>
Henkilo joan = new Henkilo("Joan Ball");
System.out.println(joan);

joan = null;
joan.vanhene();
<% end %>


<p>
  Tulos:
</p>

<% partial 'partials/sample_output' do %>
Joan Ball, ikä 0 vuotta
  <font color="red">Exception in thread "main" java.lang.NullPointerException
    at Main.main(Main.java:(rivi))
    Java Result: 1</font>
<% end %>

<p>
  Käy huonosti. Tämä on ehkä ensimmäinen kerta kun näet tekstin <strong>NullPointerException</strong>. Ohjelmassa tapahtuu virhe, joka liittyy siihen, että olemme kutsuneet ei mihinkään viittaavan muuttujan metodia.
</p>

<p>
  Voimme luvata, että tulet näkemään edellisen virheen vielä uudelleen. Tällöin ensimmäinen askel on etsiä muuttujia, joiden arvona saattaisi olla <code>null</code>. Virheilmoitus on onneksi myös hyödyllinen: se kertoo millä rivillä virhe tapahtuu. Kokeile vaikka itse!
</p>


<% partial 'partials/exercise', locals: { name: 'NullPointerException' } do %>

  <p>
    Toteuta ohjelma, jonka suorittaminen aiheuttaa virheen NullPointerException. Virheen tulee tapahtua heti kun ohjelma suoritetaan -- älä siis esimerkiksi lue käyttäjältä syötettä.
  </p>

<% end %>

<p>&nbsp;</p>

<% partial 'partials/material_sub_heading' do %>
  Olio oliomuuttujana
<% end %>


<p>
  Oliot voivat sisältää viitteitä olioihin.
</p>

<p>
  Jatketaan <code>Henkilo</code>-luokan parissa ja lisätään henkilölle syntymäpäivä. Syntymäpäivä on luonnollista esittää <code>Paivays</code>-olion avulla:
</p>


<% partial 'partials/code_highlight' do %>
public class Paivays {
    private int paiva;
    private int kuukausi;
    private int vuosi;

    public Paivays(int paiva, int kuukausi, int vuosi) {
        this.paiva = paiva;
        this.kuukausi = kuukausi;
        this.vuosi = vuosi;
    }

    public int getPaiva() {
        return this.paiva;
    }

    public int getKuukausi() {
        return this.kuukausi;
    }

    public int getVuosi() {
        return this.vuosi;
    }

    @Override
    public String toString() {
        return this.paiva + "." + this.kuukausi + "." + this.vuosi;
    }
}
<% end %>

<p>
  Koska tiedämme syntymäpäivän, henkilön ikää ei enää tarvitse säilöä. Se on pääteltävissä syntymäpäivästä.
</p>

<% partial 'partials/code_highlight' do %>
public class Henkilo {
    private String nimi;
    private Paivays syntymaPaiva;
    private int paino = 0;
    private int pituus = 0;

    // ...
<% end %>

<p>
  Tehdään henkilölle uusi konstruktori, joka mahdollistaa syntymäpäivän asettamisen:
</p>

<% partial 'partials/code_highlight' do %>
public Henkilo(String nimi, int paiva, int kuukausi, int vuosi) {
    this.nimi = nimi;
    this.syntymaPaiva = new Paivays(paiva, kuukausi, vuosi);
    this.paino = 0;
    this.pituus = 0;
}
<% end %>


<p>
  Konstruktorin parametrina annetaan erikseen päiväyksen osat (päivä, kuukausi, vuosi), niistä luodaan päiväysolio, ja lopulta päiväysolion viite kopioidaan oliomuuttujan <code>syntymaPaiva</code> arvoksi.
</p>

<p>
  Muokataan Henkilo-luokassa olevaa <code>toString</code>-metodia siten, että metodi palauttaa iän sijaan syntymäpäivän:
</p>

<% partial 'partials/code_highlight' do %>
public String toString() {
    return this.nimi + ", syntynyt " + this.syntymaPaiva;
}
<% end %>

<p>
  Kokeillaan miten uusittu Henkilöluokka toimii.
</p>

<% partial 'partials/code_highlight' do %>
Henkilo muhammad = new Henkilo("Muhammad ibn Musa al-Khwarizmi", 1, 1, 780);
Henkilo pascal = new Henkilo("Blaise Pascal", 19, 6, 1623);

System.out.println(muhammad);
System.out.println(pascal);
<% end %>


<% partial 'partials/sample_output' do %>
Muhammad ibn Musa al-Khwarizmi, syntynyt 1.1.870
Blaise Pascal, syntynyt 19.6.1623
<% end %>


<p>
  Henkilöoliolla on nyt oliomuuttujat <code>nimi</code> ja <code>syntymaPaiva</code>. Muuttuja <code>nimi</code> on merkkijono, joka sekin on siis olio, ja muuttuja <code>syntymaPaiva</code> on Päiväysolio.
</p>

<p>
  Molemmat muuttujat sisältävät arvon olioon. Henkilöolio sisältää siis kaksi viitettä.
</p>


<img src="/img/drawings/muhammad-ja-pascal.png"/>

<p>&nbsp;</p>

<p>
  Pääohjelmalla on nyt siis langan päässä kaksi Henkilö-olioa. Henkilöllä on nimi ja syntymäpäivä. Koska molemmat ovat olioita, ovat ne henkilöllä langan päässä.
</p>

<p>
  Syntymäpäivä vaikuttaa hyvältä laajennukselta Henkilö-luokkaan. Totesimme aiemmin, että oliomuuttuja <code>ika</code> voidaan laskea syntymäpäivästä, joten siitä hankkiuduttiin eroon.
</p>

<p>
  Javassa nykyinen päivä selviää seuraavasti:
</p>

<% partial 'partials/code_highlight' do %>
  import java.time.LocalDate;
  // ...
  
  LocalDate nyt = LocalDate.now();
  int vuosi = nyt.getYear();
  int kuukausi = nyt.getMonthValue();
  int paiva = nyt.getDayOfMonth();
  
  System.out.println("tänään on " + paiva + "." + kuukausi + "." + vuosi);
  // ...
<% end %>


<% partial 'partials/exercise', locals: { name: 'Ikä vuosina' } do %>

  <p>
    Tehtäväpohjassa tulee mukana edellä nähdyt luokat Henkilo ja Paivays. Täydennä luokan Henkilo metodia <code>public int ikaVuosina()</code> siten, että se laskee ja palauttaa henkilön tämän hetkisen iän vuosina.
  </p>

  <p>
    Voit olettaa, että jokaisessa vuodessa on tasan 360 päivää.
  </p>

  <p>
    <strong>Vinkki!</strong> Näppärä lähestymistapa on laskea päivien summa vuosien, kuukausien ja päivien perusteella. Erottamalla "nykypäivää" vastaavan päivien summan syntymäpäivän päivien summasta saat elettyjen päivien määrän. Eletyt päivät saa muunnettua takaisin vuosiksi jakolaskulla.
  </p>

<% end %>



<% partial 'partials/exercise', locals: { name: 'Kellosta olio' } do %>

  <p>
    Teimme aiemmin luokan <code>YlhaaltaRajoitettuLaskuri</code> ja rakennettiin laskurien avulla pääohjelmaan kello. Tehdään tässä tehtävässä kellostakin oma olio -- kello sisältää kolme viisaria, jotka jokainen esitetään ylhäältä rajoitetun laskurin avulla. Luokan kello runko näyttää seuraavalta:
  </p>

  <% partial 'partials/code_highlight' do %>
public class Kello {
    private YlhaaltaRajoitettuLaskuri tunnit;
    private YlhaaltaRajoitettuLaskuri minuutit;
    private YlhaaltaRajoitettuLaskuri sekunnit;

    public Kello(int tunnitAlussa, int minuutitAlussa, int sekunnitAlussa) {
        // laskurit tunneille, minuuteille ja sekunneille;
        // laskurien arvot tulee asettaa parametreina saatuun aikaan
    }

    public void etene() {
        // kello etenee sekunnilla
    }

    public String toString() {
        // palauttaa kellon merkkijonoesityksen
    }
}
  <% end %>

  <p>
    Luokkaan YlhaaltaRajoitettuLaskuri on kopioitu eräs ratkaisu viime osan tehtävään. Toteuta luokan <code>Kello</code> konstruktori ja puuttuvat metodit kolmea ylhäältä rajoitettua laskuria hyödyntäen.
  </p>

  <p>
    Voit testata kelloasi seuraavalla pääohjelmalla:
  </p>

  <% partial 'partials/code_highlight' do %>
public class Main {
    public static void main(String[] args) {
        Kello kello = new Kello(23, 59, 50);

        int i = 0;
        while (i &lt; 20) {
            System.out.println(kello);
            kello.etene();
            i++;
        }
    }
}
  <% end %>

  <p>
    Tulostuksen tulisi edetä seuraavasti:
  </p>

  <% partial 'partials/sample_output' do %>
23:59:50
23:59:51
23:59:52
23:59:53
23:59:54
23:59:55
23:59:56
23:59:57
23:59:58
23:59:59
00:00:00
00:00:01
...
  <% end %>

<% end %>




<% partial 'partials/hint', locals: { name: 'Algoritmi -- al-Khwarizmi' } do %>

  <p>
    Ensimmäiset korkeakulttuurit syntyivät (laajemman) lähi-idän alueelle, mikä nopeutti siellä myös henkistä kasvua. Lähi-idässä oltiin merkittävästi muuta maailmaa edellä muunmuassa matematiikassa ja tähtitieteessä -- esimerkiksi Euroopassa 1500-luvulla tapahtunut murros tähtitieteessä (maa kiertääkin aurinkoa eikä toisin päin), tapahtui laajemman lähi-idän vaikutuspiirissä olleessa kreikassa jo noin 300 vuotta ennen ajanlaskumme alkua.
  </p>

  <p>
    Nimi al-Khwarizmi viittaa oikeastaan alueeseen, tai hieman laajemmin, etuosa al- viittaa usein henkilön synty- tai kotipaikkaan. <a href="https://en.wikipedia.org/wiki/Muhammad_ibn_Musa_al-Khwarizmi" target="_blank" rel="noopener">Muhammad ibn Musa al-Khwarizmi</a> -- tai hänen isänsä tai esi-isänsä -- tulivat keskiaasiasta alueelta, joka tunnetaan nykyään suomen kielessä nimellä Harezm. Nykyään käytetty termi algoritmi on siis sekä hatunnosto Muhammad ibn Musa al-Khwarizmille, että laajemmin hänen syntyperälleen.
  </p>

  <p>
    Merkittävä osa al-Khwarizmin työstä tapahtui Baghdadissa sijaitsevassa Viisauden talossa, joka paikallisen hallinnon tukemana keräsi tiedemiehiä eri puolilta maailmaa yhteen. Tavoitteena oli "pienimuotoisesti" kerätä kaikki maailman tieto yhteen paikkaan ja kääntää se arabian kielelle, jota sitten jaettiin eteenpäin. Tätä kautta tietoa valui myös eurooppaan: esimerkiksi al-Khwarizmin kirja intialaisilla numeroilla laskemisesta (latinaksi "Algoritmi de numero Indorum") toi arabialaisten numeroiden käytön eurooppaan.
  </p>

  <p>
    Tämä terminologia näkyy yhä esimerkikiksi espanjan kielessä. Espanjankielinen sana guarismo -- eli suomeksi luku -- tulee ilmeisesti juurikin al-Khwarizmin nimestä.
  </p>

  <p>
    Vaikka Muhammad ibn Musa al-Khwarizmi kytketään nykyään -- ainakin tietojenkäsittelytieteilijöiden parissa -- ensisijaisesti algoritmeihin, on hän ennen kaikkea vaikuttanut merkittävästi algebran kehitykseen. Hänen työnsä tuolla alueella kontribuoi mm. ensimmäisen ja toisen asteen yhtälöiden ratkaisemiseen. Työn keskiössä olivat konkreettiset esimerkit sekä selkokieliset askeleittaiset ratkaisut  -- numeroita tuossa työssä ei esiintynyt.
  </p>


<% end %>



<% partial 'partials/material_sub_heading' do %>
  Olio metodin parametrina
<% end %>


<p>
  Olemme nähneet että metodien parametrina voi olla esimerkiksi <code>int</code> tai <code>String</code> tyyppisiä muuttujia. Kuten arvata saattaa, metodin parametriksi voi määritellä minkä tahansa tyyppisen olion. Demonstroidaan tätä esimerkillä.
</p>

<p>
  Painonvartijoihin hyväksytään jäseniksi henkilöitä, joiden painoindeksi ylittää annetun rajan. Kaikissa painonvartijayhdistyksissä raja ei ole sama. Tehdään painonvartijayhdistystä vastaava luokka. Olioa luotaessa konstruktorille annetaan parametriksi pienin painoindeksi, jolla yhdistyksen jäseneksi pääsee.
</p>

<% partial 'partials/code_highlight' do %>
public class PainonvartijaYhdistys {
    private double alinPainoindeksi;

    public PainonvartijaYhdistys(double indeksiRaja) {
        this.alinPainoindeksi = indeksiRaja;
    }
}
<% end %>

<p>
  Tehdään seuraavaksi metodi, jonka avulla voidaan tarkastaa hyväksytäänkö tietty henkilö yhdistyksen jäseneksi, eli onko henkilön painoindeksi tarpeeksi suuri. Metodi palauttaa <code>true</code> jos parametrina annettu henkilö hyväksytään, <code>false</code> jos ei.
</p>

<% partial 'partials/code_highlight' do %>
public class PainonvartijaYhdistys {
    private double alinPainoindeksi;

    public PainonvartijaYhdistys(double indeksiRaja) {
        this.alinPainoindeksi = indeksiRaja;
    }

    public boolean hyvaksytaanJaseneksi(Henkilo henkilo) {
        if (henkilo.painoIndeksi() &lt; this.alinPainoindeksi) {
            return false;
        }

        return true;
    }
}
<% end %>

<p>
  Painonvartijayhdistys-olion metodille <code>hyvaksytaanJaseneksi</code> annetaan siis parametrina <code>Henkilo</code>-olio. Kuten aiemmin, muuttujan arvo -- eli tässä viite -- kopioituu metodin käyttöön. Metodissa käsitellään kopioitua viitettä ja kutsutaan parametrina saadun henkilön metodia <code>painoIndeksi</code>.
</p>

<p>
  Seuraavassa testipääohjelma jossa painonvartijayhdistyksen metodille annetaan ensin parametriksi henkilöolio <code>matti</code> ja sen jälkeen henkilöolio <code>juhana</code>:
</p>

<% partial 'partials/code_highlight' do %>
Henkilo matti = new Henkilo("Matti");
matti.setPaino(86);
matti.setPituus(180);

Henkilo juhana = new Henkilo("Juhana");
juhana.setPaino(64);
juhana.setPituus(172);

PainonvartijaYhdistys kumpulanPaino = new PainonvartijaYhdistys(25);

if (kumpulanPaino.hyvaksytaanJaseneksi(matti)) {
    System.out.println(matti.getNimi() + " pääsee jäseneksi");
} else {
    System.out.println(matti.getNimi() + " ei pääse jäseneksi");
}

if (kumpulanPaino.hyvaksytaanJaseneksi(juhana)) {
    System.out.println(juhana.getNimi() + " pääsee jäseneksi");
} else {
    System.out.println(juhana.getNimi() + " ei pääse jäseneksi");
}
<% end %>

<p> Ohjelma tulostaa: </p>

<% partial 'partials/sample_output' do %>
Matti pääsee jäseneksi
Juhana ei pääse jäseneksi
<% end %>




<% partial 'partials/hint', locals: { name: 'Konstruktorien, getterien ja setterien automaattinen generointi' } do %>

  <p>
    Ohjelmointiympäristöt osaavat auttaa ohjelmoijaa. Jos luokalle on määriteltynä oliomuuttujat, onnistuu konstruktorien, getterien ja setterien generointi automaattisesti.
  </p>

  <p>
    Mene luokan koodilohkon sisäpuolelle mutta kaikkien metodien ulkopuolelle ja paina yhtä aikaa ctrl ja välilyönti. Jos luokallasi on esim. oliomuuttuja <code>saldo</code>, tarjoaa NetBeans mahdollisuuden generoida oliomuuttujalle getteri- ja setterimetodit sekä konstruktorin joka asettaa oliomuuttujalle alkuarvon.
  </p>

  <p>
    Joillain Linux-koneilla, kuten Kumpulassa olevilla koneilla, tämä saadaan aikaan painamalla yhtä aikaa ctrl, alt ja välilyönti.
  </p>

<% end %>

<!-- CAST2 -->

<a href="http://www.youtube.com/watch?feature=player_embedded&v=aSFT6UnyvE0" height="300" target="_blank" rel="noopener"><img src=" https://www.cs.helsinki.fi/group/java/k13/ohpe/img/youtube.jpg"/></a>

<p>&nbsp;</p>

<% partial 'partials/exercise', locals: { name: 'Kasvatuslaitos (3 osaa)' } do %>

  <p>
    Tehtäväpohjassasi on valmiina jo tutuksi tullut luokka <code>Henkilo</code> sekä runko luokalle <code>Kasvatuslaitos</code>. Kasvatuslaitosoliot käsittelevät ihmisiä eri tavalla, esim. punnitsevat ja syöttävät ihmisiä. Rakennamme tässä tehtävässä kasvatuslaitoksen. Luokan Henkilö koodiin ei tehtävässä ole tarkoitus koskea!
  </p>

  <h2>Henkilöiden punnitseminen</h2>

  <p>
    Kasvatuslaitoksen luokkarungossa on valmiina runko metodille <code>punnitse</code>:
  </p>

  <% partial 'partials/code_highlight' do %>
public class Kasvatuslaitos {

    public int punnitse(Henkilo henkilo) {
        // palautetaan parametrina annetun henkilön paino
        return -1;
    }
}
  <% end %>

  <p>
    Metodi saa parametrina henkilön ja metodin on tarkoitus palauttaa kutsujalleen parametrina olevan henkilön paino. Paino selviää kutsumalla parametrina olevan henkilön <code>henkilo</code> sopivaa metodia. <strong>Eli täydennä metodin koodi!</strong>
  </p>

  <p>
    Seuraavassa on pääohjelma jossa kasvatuslaitos punnitsee kaksi henkilöä:
  </p>

  <% partial 'partials/code_highlight' do %>
public static void main(String[] args) {
    // esimerkkipääohjelma tehtävän ensimmäiseen kohtaan

    Kasvatuslaitos haaganNeuvola = new Kasvatuslaitos();

    Henkilo eero = new Henkilo("Eero", 1, 110, 7);
    Henkilo pekka = new Henkilo("Pekka", 33, 176, 85);

    System.out.println(eero.getNimi() + " paino: " + haaganNeuvola.punnitse(eero) + " kiloa");
    System.out.println(pekka.getNimi() + " paino: " + haaganNeuvola.punnitse(pekka) + " kiloa");
}
  <% end %>

  <p>
    Tulostuksen pitäisi olla seuraava:
  </p>

  <% partial 'partials/sample_output' do %>
Eero paino: 7 kiloa
Pekka paino: 85 kiloa
  <% end %>

  <h2>Syöttäminen</h2>

  <p>
    Parametrina olevan olion tilaa on mahdollista muuttaa. Tee kasvatuslaitokselle metodi <code>public void syota(Henkilo henkilo)</code> joka kasvattaa parametrina olevan henkilön painoa yhdellä.
  </p>

  <p>
    Seuraavassa esimerkki, jossa henkilöt ensin punnitaan, ja tämän jälkeen neuvolassa syötetään eeroa kolme kertaa. Tämän jälkeen henkilöt taas punnitaan:
  </p>

  <% partial 'partials/code_highlight' do %>
public static void main(String[] args) {
    Kasvatuslaitos haaganNeuvola = new Kasvatuslaitos();

    Henkilo eero = new Henkilo("Eero", 1, 110, 7);
    Henkilo pekka = new Henkilo("Pekka", 33, 176, 85);

    System.out.println(eero.getNimi() + " paino: " + haaganNeuvola.punnitse(eero) + " kiloa");
    System.out.println(pekka.getNimi() + " paino: " + haaganNeuvola.punnitse(pekka) + " kiloa");

    haaganNeuvola.syota(eero);
    haaganNeuvola.syota(eero);
    haaganNeuvola.syota(eero);

    System.out.println("");

    System.out.println(eero.getNimi() + " paino: " + haaganNeuvola.punnitse(eero) + " kiloa");
    System.out.println(pekka.getNimi() + " paino: " + haaganNeuvola.punnitse(pekka) + " kiloa");
}
  <% end %>

  <p>
    Tulostuksen pitäisi paljastaa että Eeron paino on noussut kolmella:
  </p>

  <% partial 'partials/sample_output' do %>
Eero paino: 7 kiloa
Pekka paino: 85 kiloa

Eero paino: 10 kiloa
Pekka paino: 85 kiloa
  <% end %>

  <h2>Punnitusten laskeminen</h2>

  <p>
    Tee kasvatuslaitokselle metodi <code>public int punnitukset()</code> joka kertoo kuinka monta punnitusta kasvatuslaitos on ylipäätään tehnyt. Testipääohjelma:
  </p>

  <% partial 'partials/code_highlight' do %>
public static void main(String[] args) {
    // esimerkkipääohjelma tehtävän ensimmäiseen kohtaan

    Kasvatuslaitos haaganNeuvola = new Kasvatuslaitos();

    Henkilo eero = new Henkilo("Eero", 1, 110, 7);
    Henkilo pekka = new Henkilo("Pekka", 33, 176, 85);

    System.out.println("punnituksia tehty " + haaganNeuvola.punnitukset());

    haaganNeuvola.punnitse(eero);
    haaganNeuvola.punnitse(pekka);

    System.out.println("punnituksia tehty " + haaganNeuvola.punnitukset());

    haaganNeuvola.punnitse(eero);
    haaganNeuvola.punnitse(eero);
    haaganNeuvola.punnitse(eero);
    haaganNeuvola.punnitse(eero);

    System.out.println("punnituksia tehty " + haaganNeuvola.punnitukset());
}
  <% end %>

  <p>
    Tulostuu:
  </p>

  <% partial 'partials/sample_output' do %>
punnituksia tehty 0
punnituksia tehty 2
punnituksia tehty 6
  <% end %>
<% end %>



<% partial 'partials/exercise', locals: { name: 'Maksukortti ja Kassapääte (4 osaa)' } do %>

  <h2>"Tyhmä" Maksukortti</h2>

  <p>
    Teimme viime viikolla luokan Maksukortti. Kortilla oli metodit edullisesti ja maukkaasti syömistä sekä rahan lataamista varten.
  </p>

  <p>
    Viime viikon tyylillä tehdyssä Maksukortti-luokassa oli kuitenkin ongelma. Kortti tiesi lounaiden hinnan ja osasi sen ansiosta vähentää saldoa oikean määrän. Entä kun hinnat nousevat? Tai jos myyntivalikoimaan tulee uusia tuotteita? Hintojen muuttaminen tarkoittaisi, että kaikki jo käytössä olevat kortit pitäisi korvata uusilla, uudet hinnat tuntevilla korteilla.
  </p>

  <p>
    Parempi ratkaisu on tehdä kortit "tyhmiksi", hinnoista ja myytävistä tuotteista tietämättömiksi pelkän saldon säilyttäjiksi. Kaikki äly kannattaakin laittaa erillisiin olioihin, kassapäätteisiin.
  </p>

  <p>
    Toteutetaan ensin Maksukortista "tyhmä" versio. Kortilla on ainoastaan metodit saldon kysymiseen, rahan lataamiseen ja rahan ottamiseen. Täydennä alla (ja tehtäväpohjassa) olevaan luokkaan metodin <code>public boolean otaRahaa(double maara)</code> ohjeen mukaan:
  </p>

  <% partial 'partials/code_highlight' do %>
public class Maksukortti {
    private double saldo;

    public Maksukortti(double saldo) {
      this.saldo = saldo;
    }

    public double saldo() {
        return this.saldo;
    }

    public void lataaRahaa(double lisays) {
        this.saldo += lisays;
    }

    public boolean otaRahaa(double maara) {
        // toteuta metodi siten että se ottaa kortilta rahaa vain jos saldo on vähintään maara
        // onnistuessaan metodi palauttaa true ja muuten false
    }
}
  <% end %>

  <p>
    Testipääohjelma:
  </p>

  <% partial 'partials/code_highlight' do %>
public class Paaohjelma {
    public static void main(String[] args) {
        Maksukortti pekanKortti = new Maksukortti(10);

        System.out.println("rahaa " + pekanKortti.saldo());
        boolean onnistuiko = pekanKortti.otaRahaa(8);
        System.out.println("onnistuiko otto: " + onnistuiko);
        System.out.println("rahaa " + pekanKortti.saldo());

        onnistuiko = pekanKortti.otaRahaa(4);
        System.out.println("onnistuiko otto: " + onnistuiko);
        System.out.println("rahaa " + pekanKortti.saldo());
      }
}
  <% end %>

  <p>
    Tulostuksen kuuluisi olla seuraavanlainen
  </p>

  <% partial 'partials/sample_output' do %>
rahaa 10.0
onnistuiko otto: true
rahaa 2.0
onnistuiko otto: false
rahaa 2.0
  <% end %>

  
  <h2>Kassapääte ja käteiskauppa</h2>

  <p>
    Unicafessa asioidessa asiakas maksaa joko käteisellä tai maksukortilla. Myyjä käyttää kassapäätettä kortin velottamiseen ja käteismaksujen hoitamiseen. Tehdään ensin kassapäätteestä käteismaksuihin sopiva versio.
  </p>

  <p>
    Kassapäätteen runko. Metodien kommentit kertovat halutun toiminnallisuuden:
  </p>

  <% partial 'partials/code_highlight' do %>
public class Kassapaate {
    private double rahaa;  // kassassa olevan käteisen määrä
    private int edulliset; // myytyjen edullisten lounaiden määrä
    private int maukkaat;  // myytyjen maukkaiden lounaiden määrä

    public Kassapaate() {
        // kassassa on aluksi 1000 euroa rahaa
    }

    public double syoEdullisesti(double maksu) {
        // edullinen lounas maksaa 2.50 euroa.
        // kasvatetaan kassan rahamäärää edullisen lounaan hinnalla ja palautetaan vaihtorahat
        // jos parametrina annettu maksu ei ole riittävän suuri, ei lounasta myydä ja metodi palauttaa koko summan
    }

    public double syoMaukkaasti(double maksu) {
        // maukas lounas maksaa 4.30 euroa.
        // kasvatetaan kassan rahamäärää maukkaan lounaan hinnalla ja palautetaan vaihtorahat
        // jos parametrina annettu maksu ei ole riittävän suuri, ei lounasta myydä ja metodi palauttaa koko summan
    }

    public String toString() {
        return "kassassa rahaa " + rahaa + " edullisia lounaita myyty " + edulliset + " maukkaita lounaita myyty " + maukkaat;
    }
}
  <% end %>

  <p>
    Kassapäätteessä on aluksi rahaa 1000 euroa. Toteuta yllä olevan rungon metodit ohjeen ja alla olevan pääohjelman esimerkkitulosteen mukaan toimiviksi.
  </p>

  <% partial 'partials/code_highlight' do %>
public class Paaohjelma {
    public static void main(String[] args) {
        Kassapaate unicafeExactum = new Kassapaate();

        double vaihtorahaa = unicafeExactum.syoEdullisesti(10);
        System.out.println("vaihtorahaa jäi " + vaihtorahaa);

        vaihtorahaa = unicafeExactum.syoEdullisesti(5);
        System.out.println("vaihtorahaa jäi " + vaihtorahaa);

        vaihtorahaa = unicafeExactum.syoMaukkaasti(4.3);
        System.out.println("vaihtorahaa jäi " + vaihtorahaa);

        System.out.println(unicafeExactum);
    }
}
  <% end %>

  <% partial 'partials/sample_output' do %>
vaihtorahaa jäi 7.5
vaihtorahaa jäi 2.5
vaihtorahaa jäi 0.0
kassassa rahaa 1009.3 edullisia lounaita myyty 2 maukkaita lounaita myyty 1
  <% end %>

  
  <h2>Kortilla maksaminen</h2>

  <p>
    Laajennetaan kassapäätettä siten että myös kortilla voi maksaa. Teemme kassapäätteelle siis metodit joiden parametrina kassapääte saa maksukortin jolta se vähentää valitun lounaan hinnan. Seuraavassa uusien metodien rungot ja ohje niiden toteuttamiseksi:
  </p>

  <% partial 'partials/code_highlight' do %>
public class Kassapaate {
    // ...

    public boolean syoEdullisesti(Maksukortti kortti) {
        // edullinen lounas maksaa 2.50 euroa.
        // jos kortilla on tarpeeksi rahaa, vähennetään hinta kortilta ja palautetaan true
        // muuten palautetaan false
    }

    public boolean syoMaukkaasti(Maksukortti kortti) {
        // maukas lounas maksaa 4.30 euroa.
        // jos kortilla on tarpeeksi rahaa, vähennetään hinta kortilta ja palautetaan true
        // muuten palautetaan false
    }

    // ...
}
  <% end %>

  <p>
    <b>Huom:</b> kortilla maksaminen ei lisää kassapäätteessä olevan käteisen määrää.
  </p>

  <p>
    Seuraavassa testipääohjelma ja haluttu tulostus:
  </p>

  <% partial 'partials/code_highlight' do %>
public class Paaohjelma {
    public static void main(String[] args) {
        Kassapaate unicafeExactum = new Kassapaate();

        double vaihtorahaa = unicafeExactum.syoEdullisesti(10);
        System.out.println("vaihtorahaa jäi " + vaihtorahaa);

        Maksukortti antinKortti = new Maksukortti(7);

        boolean onnistuiko = unicafeExactum.syoMaukkaasti(antinKortti);
        System.out.println("riittikö raha: " + onnistuiko);
        onnistuiko = unicafeExactum.syoMaukkaasti(antinKortti);
        System.out.println("riittikö raha: " + onnistuiko);
        onnistuiko = unicafeExactum.syoEdullisesti(antinKortti);
        System.out.println("riittikö raha: " + onnistuiko);

        System.out.println(unicafeExactum);
    }
}
  <% end %>

  <% partial 'partials/sample_output' do %>
vaihtorahaa jäi 7.5
riittikö raha: true
riittikö raha: false
riittikö raha: true
kassassa rahaa 1002.5 edullisia lounaita myyty 2 maukkaita lounaita myyty 1
  <% end %>

  
  <h2>Rahan lataaminen</h2>

  <p>
    Lisätään vielä kassapäätteelle metodi jonka avulla kortille voidaan ladata lisää rahaa. Muista, että rahan lataamisen yhteydessä ladattava summa viedään kassapäätteeseen. Metodin runko:
  </p>

  <% partial 'partials/code_highlight' do %>
public void lataaRahaaKortille(Maksukortti kortti, double summa) {
    // ...
}
  <% end %>

  <p>
    Testipääohjelma ja esimerkkisyöte:
  </p>

  <% partial 'partials/code_highlight' do %>
public class Paaohjelma {
    public static void main(String[] args) {
        Kassapaate unicafeExactum = new Kassapaate();
        System.out.println(unicafeExactum);

        Maksukortti antinKortti = new Maksukortti(2);

        System.out.println("kortilla rahaa " + antinKortti.saldo() + " euroa");

        boolean onnistuiko = unicafeExactum.syoMaukkaasti(antinKortti);
        System.out.println("riittikö raha: " + onnistuiko);

        unicafeExactum.lataaRahaaKortille(antinKortti, 100);

        onnistuiko = unicafeExactum.syoMaukkaasti(antinKortti);
        System.out.println("riittikö raha: " + onnistuiko);

        System.out.println("kortilla rahaa " + antinKortti.saldo() + " euroa");

        System.out.println(unicafeExactum);
    }
}
  <% end %>

  <% partial 'partials/sample_output' do %>
kassassa rahaa 1000.0 edullisia lounaita myyty 0 maukkaita lounaita myyty 0
kortilla rahaa 2.0 euroa
riittikö raha: false
riittikö raha: true
kortilla rahaa 97.7 euroa
kassassa rahaa 1100.0 edullisia lounaita myyty 0 maukkaita lounaita myyty 1
  <% end %>
<% end %>



<% partial 'partials/material_sub_heading' do %>
  Samantyyppinen olio metodin parametrina
<% end %>

<p>
  Jatkamme edelleen luokan <code>Henkilo</code> parissa. Kuten muistamme, henkilöt tietävät syntymäpäivänsä:
</p>

<% partial 'partials/code_highlight' do %>
public class Henkilo {

    private String nimi;
    private Paivays syntymaPaiva;
    private int pituus;
    private int paino;

    // ...
}
<% end %>


<p>
  Haluamme vertailla kahden henkilön ikää. Vertailu voidaan hoitaa usealla tavalla. Voisimme käyttää esimerkiksi aiemmassa tehtävässä toteutettua metodia <code>ikaVuosina()</code>, jolloin kahden henkilön iän vertailu tapauhtuisi tällöin seuraavasti:
</p>


<% partial 'partials/code_highlight' do %>
Henkilo muhammad = new Henkilo("Muhammad ibn Musa al-Khwarizmi", 1, 1, 780);
Henkilo pascal = new Henkilo("Blaise Pascal", 19, 6, 1623);

if (muhammad.ikaVuosina() &gt; pascal.ikaVuosina()) {
    System.out.println(muhammad.getNimi() + " on vanhempi kuin " + pascal.getNimi());
}
<% end %>

<p>
  Harjoittelemme nyt hieman "oliohenkisemmän" tavan kahden henkilön ikävertailun tekemiseen.
</p>

<p>
  Teemme Henkilöluokalle metodin <code>boolean vanhempiKuin(Henkilo verrattava)</code> jonka avulla tiettyä henkilö-olioa voi verrata parametrina annettuun henkilöön iän perusteella.
</p>

<p>
  Metodia on tarkoitus käyttää seuraavaan tyyliin:
</p>

<% partial 'partials/code_highlight' do %>
Henkilo muhammad = new Henkilo("Muhammad ibn Musa al-Khwarizmi", 1, 1, 780);
Henkilo pascal = new Henkilo("Blaise Pascal", 19, 6, 1623);

if (muhammad.vanhempiKuin(pascal)) {  //  sama kun muhammad.vanhempiKuin(pascal)==true
    System.out.println(muhammad.getNimi() + " on vanhempi kuin " + pascal.getNimi());
} else {
    System.out.println(muhammad.getNimi() + " ei ole vanhempi kuin " + pascal.getNimi());
}
<% end %>

<p>
  Tässä siis kysytään onko al-Khwarizmi Pascalia vanhempi "jos A on vanhempi kuin B". Metodi <code>vanhempiKuin</code> palauttaa arvon <code>true</code> jos olio jonka kohdalla metodia kutsutaan (<code>olio.vanhempiKuin(parametrinaAnnettavaOlio)</code>) on vanhempi kuin parametrina annettava olio, ja <code>false</code> muuten.
</p>

<p>
  Käytännössä yllä kutsutaan "Muhammad ibn Musa al-Khwarizmia" vastaavan olion, johon muuttuja <code>muhammad</code> viittaa, metodia <code>vanhempiKuin</code>, jolle annetaan parametriksi "Blaise Pascal" vastaavan olion viite <code>pascal</code>.
</p>

<p>
  Ohjelma tulostaa:
</p>

<% partial 'partials/sample_output' do %>
Muhammad ibn Musa al-Khwarizmi on vanhempi kuin Blaise Pascal
<% end %>

<p>
  Metodille <code>vanhempiKuin</code> annetaan parametrina henkilöolio. Tarkemmin sanottuna metodin parametriksi määriteltyyn muuttujaan kopioituu parametrina annettavan muuttujan sisältämä arvo, eli viite olioon.
</p>

<p>
  Metodin toteutus näyttää seuraavalta. Huomaa, että metodi voi palauttaa arvon useammasta kohtaa -- alla vertailu on pilkottu useampaan osaan:
</p>

<% partial 'partials/code_highlight' do %>
public class Henkilo {
    // ...

    public boolean vanhempiKuin(Henkilo verrattava) {
        // toteutus
        if (this.getSyntymaPaiva().getVuosi() &lt; verrattava.getSyntymaPaiva().getVuosi()) {
            return true;
        }

        if (this.getSyntymaPaiva().getVuosi() == verrattava.getSyntymaPaiva().getVuosi()
            && this.getSyntymaPaiva().getKuukausi() &lt; verrattava.getSyntymaPaiva().getKuukausi()) {
            return true;
        }

        if (this.getSyntymaPaiva().getVuosi() == verrattava.getSyntymaPaiva().getVuosi()
            && this.getSyntymaPaiva().getKuukausi() == verrattava.getSyntymaPaiva().getKuukausi()
            && this.getSyntymaPaiva().getPaiva() &lt; verrattava.getSyntymaPaiva().getPaiva()) {
            return true;
        }

        return false;
    }
}<% end %>


<p>
  Mietitään hieman olio-ohjelmoinnin periatteiden abstrahointia. Abstrahoinnin ajatuksena on käsitteellistää ohjelmakoodia siten, että kullakin käsitteellä on omat selkeät vastuunsa. Kun pohdimme yllä esitettyä ratkaisua, huomaamme, että päivämäärien vertailutoiminnallisuus kuuluisi mielummin luokkaan <code>Paivays</code> luokan <code>Henkilo</code>-sijaan.
</p>

<p>
  Luodaan luokalle <code>Paivays</code> metodi <code>public boolean aiemmin(Paivays verrattava)</code>. Metodi palauttaa arvon <code>true</code>, jos metodille parametrina annettu päiväys on kyseisen olion päiväyksen jälkeen.
</p>

<% partial 'partials/code_highlight' do %>
public class Paivays {
    private int paiva;
    private int kuukausi;
    private int vuosi;

    public Paivays(int paiva, int kuukausi, int vuosi) {
        this.paiva = paiva;
        this.kuukausi = kuukausi;
        this.vuosi = vuosi;
    }

    public String toString() {
        return this.paiva + "." + this.kuukausi + "." + this.vuosi;
    }

    // metodilla tarkistetaan onko tämä päiväysolio (<code>this</code>) ennen
    // parametrina annettavaa päiväysoliota (<code>verrattava</code>)
    public boolean aiemmin(Paivays verrattava) {
        // ensin verrataan vuosia
        if (this.vuosi &lt; verrattava.vuosi) {
            return true;
        }

        // jos vuodet ovat samat, verrataan kuukausia
        if (this.vuosi == verrattava.vuosi &amp;&amp; this.kuukausi &lt; verrattava.kuukausi) {
            return true;
        }

        // vuodet ja kuukaudet samoja, verrataan päivää
        if (this.vuosi == verrattava.vuosi &amp;&amp; this.kuukausi == verrattava.kuukausi &amp;&amp;
            this.paiva &lt; verrattava.paiva) {
            return true;
        }

        return false;
    }
}
<% end %>

<p>
  Vaikka oliomuuttujat <code>vuosi</code>, <code>kuukausi</code> ja <code>paiva</code> ovat olion kapseloimia (<code>private</code>) oliomuuttujia, pystymme lukemaan niiden arvon kirjoittamalla <code>verrattava.<em>muuttujanNimi</em></code>. Tämä johtuu siitä, että <code>private</code>-muuttujat ovat luettavissa kaikissa metodeissa, jotka kyseinen luokka sisältää. Huomaa, että syntaksi (kirjoitusasu) vastaa tässä jonkin olion metodin kutsumista. Toisin kuin metodia kutsuttaessa, viittaamme olion kenttään, jolloin metodikutsun osoittavia sulkeita ei kirjoiteta.
</p>

<p>
  Metodin käyttöesimerkki:
</p>

<% partial 'partials/code_highlight' do %>
public static void main(String[] args) {
    Paivays p1 = new Paivays(14, 2, 2011);
    Paivays p2 = new Paivays(21, 2, 2011);
    Paivays p3 = new Paivays(1, 3, 2011);
    Paivays p4 = new Paivays(31, 12, 2010);

    System.out.println(p1 + " aiemmin kuin " + p2 + ": " + p1.aiemmin(p2));
    System.out.println(p2 + " aiemmin kuin " + p1 + ": " + p2.aiemmin(p1));

    System.out.println(p2 + " aiemmin kuin " + p3 + ": " + p2.aiemmin(p3));
    System.out.println(p3 + " aiemmin kuin " + p2 + ": " + p3.aiemmin(p2));

    System.out.println(p4 + " aiemmin kuin " + p1 + ": " + p4.aiemmin(p1));
    System.out.println(p1 + " aiemmin kuin " + p4 + ": " + p1.aiemmin(p4));
}
<% end %>

<% partial 'partials/sample_output' do %>
14.2.2011 aiemmin kuin 21.2.2011: true
21.2.2011 aiemmin kuin 14.2.2011: false
21.2.2011 aiemmin kuin 1.3.2011: true
1.3.2011 aiemmin kuin 21.2.2011: false
31.12.2010 aiemmin kuin 14.2.2011: true
14.2.2011 aiemmin kuin 31.12.2010: false
<% end %>

<p>
  Muunnetaan vielä henkilön metodia vanhempiKuin siten, että hyödynnämme jatkossa päivämäärän tarjoamaa vertailutoiminnallisuutta.
</p>

<% partial 'partials/code_highlight' do %>
public class Henkilo {
    // ...

    public boolean vanhempiKuin(Henkilo verrattava) {
        if (this.syntymaPaiva.aiemmin(verrattava.getSyntymaPaiva())) {
            return true;
        }

        return false;
    }
}
<% end %>

<p>
  Nyt päivämäärän konkreettinen vertailu on toteutettu luokassa, johon se loogisesti (luokkien nimien perusteella) kuuluukin.
</p>

<% partial 'partials/exercise', locals: { name: 'Asuntovertailu (3 osaa)' } do %>

  <p>
    Asuntovälitystoimiston tietojärjestelmässä myynnissä olevaa asuntoa kuvataan seuraavan luokan olioilla:
  </p>

  <% partial 'partials/code_highlight' do %>
public class Asunto {
    private int huoneita;
    private int nelioita;
    private int neliohinta;

    public Asunto(int huoneita, int nelioita, int neliohinta) {
        this.huoneita = huoneita;
        this.nelioita = nelioita;
        this.neliohinta = neliohinta;
    }
}
  <% end %>

  <p>
    Tehtävänä on toteuttaa muutama metodi, joiden avulla myynnissä olevia asuntoja voidaan vertailla.
  </p>

  <h2>Onko asunto suurempi</h2>

  <p>
    Tee metodi <code>public boolean suurempi(Asunto verrattava)</code> joka palauttaa true jos asunto-olio, jolle metodia kutsutaan on suurempi kuin verrattavana oleva asunto-olio.
  </p>

  <p>
    Esimerkki metodin toiminnasta:
  </p>

  <% partial 'partials/code_highlight' do %>
Asunto eiraYksio = new Asunto(1, 16, 5500);
Asunto kallioKaksio = new Asunto(2, 38, 4200);
Asunto jakomakiKolmio = new Asunto(3, 78, 2500);

System.out.println(eiraYksio.suurempi(kallioKaksio));       // false
System.out.println(jakomakiKolmio.suurempi(kallioKaksio));  // true
  <% end %>

  <h2>Asuntojen hintaero</h2>

  <p>
    Tee metodi <code>public int hintaero(Asunto verrattava)</code> joka palauttaa asunto-olion jolle metodia kutsuttiin ja parametrina olevan asunto-olion hintaeron. Hintaero on asuntojen hintojen (=neliöhinta*neliöt) itseisarvo.
  </p>

  <p>
    Esimerkki metodin toiminnasta:
  </p>

  <% partial 'partials/code_highlight' do %>
Asunto eiraYksio = new Asunto(1, 16, 5500);
Asunto kallioKaksio = new Asunto(2, 38, 4200);
Asunto jakomakiKolmio = new Asunto(3, 78, 2500);

System.out.println(eiraYksio.hintaero(kallioKaksio));        // 71600
System.out.println(jakomakiKolmio.hintaero(kallioKaksio));   // 35400
  <% end %>

  <h2>Onko asunto kalliimpi</h2>

  <p>
    Tee metodi <code>public boolean kalliimpi(Asunto verrattava)</code> joka palauttaa true jos asunto-olio, jolle metodia kutsutaan on kalliimpi kuin verrattavana oleva asunto-olio.
  </p>

  <p>
    Esimerkki metodin toiminnasta:
  </p>

  <% partial 'partials/code_highlight' do %>
Asunto eiraYksio = new Asunto(1, 16, 5500);
Asunto kallioKaksio = new Asunto(2, 38, 4200);
Asunto jakomakiKolmio = new Asunto(3, 78, 2500);

System.out.println(eiraYksio.kalliimpi(kallioKaksio));       // false
System.out.println(jakomakiKolmio.kalliimpi(kallioKaksio));   // true
  <% end %>
<% end %>


<% partial 'partials/material_sub_heading' do %>
  Olioiden yhtäsuuruuden vertailu
<% end %>

<p>
  Opimme merkkijonojen käsittelyn yhteydessä, että merkkijonojen vertailu tulee toteuttaa <code>equals</code>-metodin avullla. Tämä tapahtuu seuraavasti.
</p>


<% partial 'partials/code_highlight' do %>
  Scanner lukija = new Scanner(System.in);

  System.out.println("Syötä kaksi sanaa, kumpikin omalle rivilleen.")
  String eka = lukija.nextLine();
  String toka = lukija.nextLine();

  if (eka.equals(toka)) {
      System.out.println("Sanat olivat samat.");
  } else {
      System.out.println("Sanat eivät olleet samat.");
  }
<% end %>

<p>
  Alkeistyyppisten muuttujien kuten <code>int</code> kanssa muuttujien vertailu on mahdollista kahden yhtäsuuruusmerkin avulla. Tämä johtuu siitä, että alkeistyyppisten muuttujien arvo sijaitsee "muuttujan lokerossa". Viittaustyyppisten muuttujien arvo on taas osoite viitattavaan olioon, eli viittaustyyppisten muuttujien "lokerossa" on viite muistipaikkaan. Kahden yhtäsuuruusmerkin avulla verrataan "muuttujan lokeron" sisällön yhtäsuuruutta -- viittaustyyppisillä muuttujilla vertailu tarkastelisi siis muuttujien osoitteita.
</p>

<p>
  Metodi <code>equals</code> taas tarkastelee muuttujaan liittyvän olion sisältöä. Jos haluamme pystyä vertailemaan kahta itse toteuttamaamme oliota equals-metodilla, tulee metodi määritellä luokkaan. Metodi equals määritellään luokkaan boolean-tyyppisen arvon palauttavana metodina -- boolean-muuttujan arvo kertoo ovatko oliot samat.
</p>

<p>
  Metodi <code>equals</code> toteutetaan siten, että sen avulla voidaan vertailla nykyistä oliota mihin tahansa muuhun olioon. Metodi saa parametrinaan Object-tyyppisen olion -- kaikki oliot ovat oman tyyppinsä lisäksi Object-tyyppisiä. Metodissa ensin vertaillaan ovatko osoitteet samat: jos kyllä, oliot ovat samat. Tämän jälkeen tarkastellaan ovatko olion tyypit samat: jos ei, oliot eivät ole samat. Tämän jälkeen parametrina saatu Object-olio muunnetaan tyyppimuunnoksella tarkasteltavan olion muotoiseksi, ja oliomuuttujien arvoja vertaillaan. Alla vertailu on toteutettu Paivays-oliolle.
</p>



<% partial 'partials/code_highlight' do %>
  public class Paivays {
      private int paiva;
      private int kuukausi;
      private int vuosi;

      public Paivays(int paiva, int kuukausi, int vuosi) {
          this.paiva = paiva;
          this.kuukausi = kuukausi;
          this.vuosi = vuosi;
      }

      public int getPaiva() {
          return this.paiva;
      }

      public int getKuukausi() {
          return this.kuukausi;
      }

      public int getVuosi() {
          return this.vuosi;
      }

      public boolean equals(Object verrattava) {
          // jos muuttujat sijaitsevat samassa paikassa, ovat ne samat
          if (this == verrattava) {
              return true;
          }

          // jos verrattava olio ei ole Paivays-tyyppinen, oliot eivät ole samat
          if (!(verrattava instanceof Paivays)) {
              return false;
          }

          // muunnetaan oli Paivays-olioksi
          Paivays verrattavaPaivays = (Paivays) verrattava;

          // jos olioiden oliomuuttujien arvot ovat samat, ovat oliot samat
          if (this.paiva == verrattavaPaivays.paiva &&
                  this.kuukausi == verrattavaPaivays.kuukausi &&
                  this.vuosi == verrattavaPaivays.vuosi) {
              return true;
          }

          // muulloin oliot eivät ole samat
          return false;
      }
  
      @Override
      public String toString() {
          return this.paiva + "." + this.kuukausi + "." + this.vuosi;
      }
  }
<% end %>

<p>
  Vastaavan vertailutoiminnallisuuden rakentaminen onnistuu myös Henkilö-olioille. Alla vertailu on toteutettu Henkilo-oliolle, jolla ei ole erillista Paivays-oliota. Huomaa, että henkilöiden nimet ovat merkijonoja (eli olioita), joten niiden vertailussa käytetään equals-metodia.
</p>

<% partial 'partials/code_highlight' do %>
public class Henkilo {

    private String nimi;
    private int ika;
    private int paino;
    private int pituus;

    // konstruktorit ja metodit


    public boolean equals(Object verrattava) {
        // jos muuttujat sijaitsevat samassa paikassa, ovat ne samat
        if (this == verrattava) {
            return true;
        }

        // jos verrattava olio ei ole Henkilo-tyyppinen, oliot eivät ole samat
        if (!(verrattava instanceof Henkilo)) {
            return false;
        }

        // muunnetaan olio Henkilo-olioksi
        Henkilo verrattavaHenkilo = (Henkilo) verrattava;

        // jos olioiden oliomuuttujien arvot ovat samat, ovat oliot samat
        if (this.nimi.equals(verrattavaHenkilo.nimi) && 
                this.ika == verrattavaHenkilo.ika &&
                this.paino == verrattavaHenkilo.paino &&
                this.pituus == verrattavaHenkilo.pituus) {
            return true;
        }

       // muulloin oliot eivät ole samat
       return false;
    }

    // .. metodeja
}
<% end %>

  
<% partial 'partials/exercise', locals: { name: 'Kappale' } do %>
  
  <p>
    Tehtäväpohjassa on luokka <code>Kappale</code>, jonka perusteella voidaan luoda musiikkikappaleita esittäviä olioita. Lisää luokkaan kappale metodi <code>equals</code>, jonka avulla voidaan tarkastella musiikkikappaleiden samankaltaisuutta.
  </p>
  
  <% partial 'partials/code_highlight' do %>
    Kappale jackSparrow = new Kappale("The Lonely Island", "Jack Sparrow", 196);
    Kappale toinenSparrow = new Kappale("The Lonely Island", "Jack Sparrow", 196);

    if (jackSparrow.equals(toinenSparrow)) {
        System.out.println("Kappaleet olivat samat.");
    }

    if (jackSparrow.equals("Toinen olio")) {
        System.out.println("Nyt on jotain hassua.");
    }
  <% end %>

  <% partial 'partials/sample_output' do %>
    Kappaleet olivat samat.
  <% end %>
<% end %>


<% partial 'partials/exercise', locals: { name: 'Henkilön vertailu' } do %>
  
  <p>
    Tehtäväpohjassa on luokka <code>Henkilo</code>, johon liittyy <code>Paivays</code>-olio. Lisää luokalle Henkilo metodi <code>public boolean equals(Object verrattava)</code>, jonka avulla voidaan verrata henkilöiden samuutta. Vertailussa tulee verrata kaikkien henkilön muuttujien yhtäsuuruutta (ml. syntymäpäivä).
  </p>

  <p>
    Tehtäväpohjassa ei ole testejä. Keksi erilaisia esimerkkikoodeja, joilla voit testata ohjelman toimintaa. Alla pari esimerkkiä.
  </p>

  <% partial 'partials/code_highlight' do %>
    Paivays pvm = new Paivays(24, 2, 2017);
    Paivays pvm2 = new Paivays(23, 7, 2017);

    Henkilo leevi = new Henkilo("Leevi", pvm, 62, 9);
    Henkilo lilja = new Henkilo("Lilja", pvm2, 65, 8);

    if (leevi.equals(lilja)) {
        System.out.println("Meniköhän nyt ihan oikein?");
    } 

    Henkilo leeviEriPainolla = new Henkilo("Leevi", pvm, 62, 10);

    if (leevi.equals(leeviEriPainolla)) {
        System.out.println("Meniköhän nyt ihan oikein?");
    } 

  <% end %>
  
<% end %>


<% partial 'partials/hint', locals: { name: 'Mikä ihmeen Object?' } do %>

  <p>
    Olio-ohjelmoinnin periaatteissa todettiin seuraavaa: <em>Olio-ohjelmoinnissa on mahdollista luoda luokkia, jotka perivät toisen luokan ominaisuuksia (eli oliomuuttujat ja metodit). Tällöin luokasta tehdyt oliot ovat samalla myös perityn luokan ilmentymiä, jolloin oliot voivat esiintyä useampina erilaisina olioina käyttötarpeesta riippuen.</em>
  </p>

  <p>
    Jokainen luomamme luokka (ja Javan valmis luokka) perii luokan Object, vaikkei sitä erikseen ohjelmakoodissa näy. Tämän takia mistä tahansa luokasta tehty ilmentymä voidaan asettaa parametriksi metodiin, joka saa parametrina Object-tyyppisen muuttujan. Object-luokan periminen näkyy myös muissa asioissa: esimerkiksi metodi <code>toString</code> on olemassa vaikkei sitä erikseen toteuteta, aivan samalla tavalla kuin metodi <code>equals</code>.
  </p>

  <p>
    Esimerkiksi seuraava lähdekoodi siis "toimii" oikein, vaikkei toiminta ehkä olekaan haluttua.
  </p>
  
  <% partial 'partials/code_highlight' do %>
    public class Lintu {
        private String nimi;

        public Lintu(String nimi) {
            this.nimi = nimi;
        } 
    }
  <% end %>


  <% partial 'partials/code_highlight' do %>
    Lintu red = new Lintu("Red");
    System.out.println(red);

    Lintu chuck = new Lintu("Chuck");
    System.out.println(chuck);

    if (red.equals(chuck)) {
        System.out.println(red + " on sama kuin " + chuck);
    }
  <% end %>

  <p>
    Vaikka ohjelma on syntaktisesti oikein, ei lopputulos liene kuitenkaan toivottu.
  </p>
  
<% end %>


<% partial 'partials/material_sub_heading' do %>
  Olio metodin paluuarvona
<% end %>


<p>
  Olemme nähneet metodeja jotka palauttavat totuusarvoja, lukuja ja merkkijonoja. On helppoa arvata, että metodi voi palauttaa minkä tahansa tyyppisen olion.
</p>

<p>
  Seuraavassa esimerkissä on yksinkertainen laskuri, jolla on metodi <code>kloonaa</code>. Metodin avulla laskurista voidaan tehdä klooni, eli uusi laskurio-olio, jolla on luomishetkellä sama arvo kuin kloonattavalla laskurilla:
</p>

<% partial 'partials/code_highlight' do %>
public Laskuri {
    private int arvo;

    public Laskuri() {
        this(0);
    }

    public Laskuri(int alkuarvo) {
        this.arvo = alkuarvo;
    }

    public void kasvata() {
        this.arvo++;
    }

    public String toString() {
        return "arvo: " + arvo;
    }

    public Laskuri kloonaa() {
        // luodaan uusi laskuriolio, joka saa alkuarvokseen kloonattavan laskurin arvon
        Laskuri klooni = new Laskuri(this.arvo);

        // palautetaan klooni kutsujalle
        return klooni;
    }
}
<% end %>

<p>
  Seuraavassa käyttöesimerkki:
</p>

<% partial 'partials/code_highlight' do %>
Laskuri laskuri = new Laskuri();
laskuri.kasvata();
laskuri.kasvata();

System.out.println(laskuri);         // tulostuu 2

Laskuri klooni = laskuri.kloonaa();

System.out.println(laskuri);         // tulostuu 2
System.out.println(klooni);          // tulostuu 2

laskuri.kasvata();
laskuri.kasvata();
laskuri.kasvata();
laskuri.kasvata();

System.out.println(laskuri);         // tulostuu 6
System.out.println(klooni);          // tulostuu 2

klooni.kasvata();

System.out.println(laskuri);         // tulostuu 6
System.out.println(klooni);          // tulostuu 3
<% end %>

<p>
  Kloonattavan ja kloonin sisältämä arvo on kloonauksen tapahduttua sama. Kyseessä on kuitenkin kaksi erillistä olioa, eli kun toista laskureista kasvatetaan, ei kasvatus vaikuta toisen arvoon millään tavalla.
</p>

<p>
  Vastaavasti myös <code>Tehdas</code>-olio voisi luoda ja palauttaa uusia <code>Auto</code>-olioita. Alla on hahmoteltu tehtaan runkoa -- tehdas tietää myös luotavien autojen merkin.
</p>

<% partial 'partials/code_highlight' do %>
public class Tehdas {
    private String merkki;

    public Tehdas(String merkki) {
        this.merkki = merkki;
    }

    public Auto tuotaAuto() {
        return new Auto(this.merkki);
    }
}
<% end %>


<% partial 'partials/exercise', locals: { name: 'Päiväys (3 osaa)' } do %>

  <p>
    Tehtäväpohjan mukana tulee aiemmin esitelty luokka <code>Paivays</code>, jossa päivämäärä talletetaan oliomuuttujien <code>vuosi</code>, <code>kuukausi</code>, ja <code>paiva</code> avulla:
  </p>

    <% partial 'partials/code_highlight' do %>
public class Paivays {
    private int paiva;
    private int kuukausi;
    private int vuosi;

    public Paivays(int paiva, int kuukausi, int vuosi) {
        this.paiva = paiva;
        this.kuukausi = kuukausi;
        this.vuosi = vuosi;
    }

    public String toString() {
        return this.paiva + "." + this.kuukausi + "." + this.vuosi;
    }

    public boolean aiemmin(Paivays verrattava) {
        // ensin verrataan vuosia
        if (this.vuosi &lt; verrattava.vuosi) {
            return true;
        }

        // jos vuodet ovat samat, verrataan kuukausia
        if (this.vuosi == verrattava.vuosi &amp;&amp; this.kuukausi &lt; verrattava.kuukausi) {
            return true;
        }

        // vuodet ja kuukaudet samoja, verrataan päivää
        if (this.vuosi == verrattava.vuosi &amp;&amp; this.kuukausi == verrattava.kuukausi &amp;&amp;
            this.paiva &lt; verrattava.paiva) {
            return true;
        }

        return false;
    }
}
    <% end %>

    <p>
      Tässä tehtäväsarjassa laajennetaan luokkaa.
    </p>

    
    <h2>Seuraava päivä</h2>

    <p>
      Toteuta metodi <code>public void etene()</code>, joka siirtää päiväystä yhdellä päivällä. Tässä tehtävässä oletetaan, että jokaisessa kuukaudessa on 30 päivää. Huom! Sinun tulee <em>tietyissä</em> tilanteissa muuttaa kuukauden ja vuoden arvoa.
    </p>

    
    <h2>Tietty määrä päiviä eteenpäin</h2>

    <p>
      Toteuta metodi <code>public void etene(int montakoPaivaa)</code>, joka siirtää päiväystä annetun päivien määrän verran. Käytä apuna edellisessä tehtävässä toteutettua metodia <code>etene()</code>.
    </p>

    
    <h2>Ajan kuluminen</h2>

    <p>
      Lisätään <code>Paivays</code>-olioon mahdollisuus edistää aikaa. Tee oliolle metodi <code>Paivays paivienPaasta(int paivia)</code>, joka luo <strong>uuden</strong> <code>Paivays</code>-olion, jonka päiväys on annetun päivien lukumäärän verran suurempi kuin oliolla, jolle sitä kutsuttiin. Voit edelleen olettaa, että jokaisessa kuukaudessa on 30 päivää. Huomaa, että vanhan päiväysolion on pysyttävä muuttumattomana!
    </p>

    <p>
      Koska metodissa on luotava <strong>uusi olio</strong>, tulee rungon olla suunnilleen seuraavanlainen:
    </p>

    <% partial 'partials/code_highlight' do %>
public Paivays paivienPaasta(int paivia) {
    Paivays uusiPaivays = new Paivays( ... );

    // tehdään jotain...

    return uusiPaivays;
}
    <% end %>

    <p>
      Ohessa on esimerkki metodin toiminnasta.
    </p>

    <% partial 'partials/code_highlight' do %>
public static void main(String[] args) {
    Paivays pvm = new Paivays(13, 2, 2015);
    System.out.println("Tarkistellun viikon perjantai on " + pvm);

    Paivays uusiPvm = pvm.paivienPaasta(7);
    int vk = 1;
    while (vk &lt;= 7) {
        System.out.println("Perjantai " + vk + " viikon kuluttua on " + uusiPvm);
        uusiPvm = uusiPvm.paivienPaasta(7);

        vk++;
    }


    System.out.println("Päivämäärä 790:n päivän päästä tarkistellusta perjantaista on ... kokeile itse!");
//    System.out.println("Kokeile " + pvm.paivienPaasta(790));
}
    <% end %>

    <p>
      Ohjelma tulostaa:
    </p>

    <% partial 'partials/sample_output' do %>
Tarkistellun viikon perjantai on 13.2.2015
Perjantai 1 viikon kuluttua on 20.2.2015
Perjantai 2 viikon kuluttua on 27.2.2015
Perjantai 3 viikon kuluttua on 4.3.2015
Perjantai 4 viikon kuluttua on 11.3.2015
Perjantai 5 viikon kuluttua on 18.3.2015
Perjantai 6 viikon kuluttua on 25.3.2015
Perjantai 7 viikon kuluttua on 2.4.2015
Päivämäärä 790:n päivän päästä tarkistellusta perjantaista on ... kokeile itse!
    <% end %>

    <p>
      <strong>Huom!</strong> Sen sijaan, että muuttaisimme vanhan olion tilaa palautamme uuden olion. Kuvitellaan, että <code>Paivays</code>-luokalle on olemassa metodi <code>edista</code>, joka toimii vastaavasti kuin ohjelmoimamme metodi, mutta se muuttaa vanhan olion tilaa. Tällöin seuraava koodin pätkä tuottaisi ongelmia.
    </p>

    <% partial 'partials/code_highlight' do %>
Paivays nyt = new Paivays(13, 2, 2015);
Paivays viikonPaasta = nyt;
viikonPaasta.edista(7);

System.out.println("Nyt: " + nyt);
System.out.println("Viikon päästä: " + viikonPaasta);
    <% end %>

    <p>
      Ohjelman tulostus olisi seuraavanlainen:
    </p>

    <% partial 'partials/sample_output' do %>
Nyt 20.2.2015
Viikon päästä 20.2.2015
    <% end %>

    <p>
      Tämä johtuu siitä, että tavallinen sijoitus kopioi ainoastaan viitteen olioon. Siis itse asiassa ohjelman oliot <code>nyt</code> ja <code>viikonPaasta</code> viittavaat <strong>yhteen ja samaan</strong> <code>Paivays</code>-olioon.
    </p>
    
<% end %>



<% partial 'partials/exercise', locals: { name: 'Raha (3 osaa)' } do %>

  <p>
    Maksukortti-tehtävässä käytimme rahamäärän tallettamiseen double-tyyppistä oliomuuttujaa. Todellisissa sovelluksissa näin ei kannata tehdä, sillä kuten jo olemme nähneet, doubleilla laskenta ei ole tarkkaa. Onkin järkevämpää toteuttaa rahamäärän käsittely oman luokkansa avulla. Seuraavassa on luokan runko:
  </p>

  <% partial 'partials/code_highlight' do %>
public class Raha {

    private final int euroa;
    private final int senttia;

    public Raha(int euroa, int senttia) {
        this.euroa = euroa;
        this.senttia = senttia;
    }

    public int eurot() {
      return euroa;
    }

    public int sentit() {
        return senttia;
    }

    public String toString() {
        String nolla = "";
        if (senttia &lt;= 10) {
            nolla = "0";
        }

        return euroa + "." + nolla + senttia + "e";
    }
}
  <% end %>

  <p>
    Määrittelyssä pistää silmään oliomuuttujien määrittelyn yhteydessä käytetty sana <code>final</code>, tällä saadaan aikaan se, että oliomuuttujien arvoa ei pystytä muuttamaan sen jälkeen kun ne on konstruktorissa asetettu. Raha-luokan oliot ovatkin muuttumattomia eli <em>immutaabeleita</em>, eli jos halutaan esim. kasvattaa rahamäärää, on luotava uusi olio, joka kuvaa kasvatettua rahasummaa.
  </p>

  <p>
    Luomme seuraavassa muutaman operaation rahojen käsittelyyn.
  </p>


  <h2>Plus</h2>

  <p>
    Tee ensin metodi <code>public Raha plus(Raha lisattava)</code>, joka palauttaa uuden raha-olion, joka on arvoltaan yhtä suuri kuin se olio jolle metodia kutsuttiin ja parametrina oleva olio yhteensä.
  </p>

  <p>
    Metodin runko on seuraavanlainen:
  </p>

  <% partial 'partials/code_highlight' do %>
public Raha plus(Raha lisattava) {
    Raha uusi = new Raha(...); // luodaan uusi Raha-olio jolla on oikea arvo

    // palautetaan uusi Raha-olio
    return uusi;
}
  <% end %>

  <p>
    Seuraavassa esimerkkejä metodin toiminnasta
  </p>

  <% partial 'partials/code_highlight' do %>
Raha a = new Raha(10,0);
Raha b = new Raha(5,0);

Raha c = a.plus(b);

System.out.println(a);  // 10.00e
System.out.println(b);  // 5.00e
System.out.println(c);  // 15.00e

a = a.plus(c);          // HUOM: tässä syntyy uusi Raha-olio, joka laitataan "a:n langan päähän"
//       vanha a:n langan päässä ollut 10 euroa häviää ja Javan roskien kerääjä korjaa sen pois

System.out.println(a);  // 25.00e
System.out.println(b);  // 5.00e
System.out.println(c);  // 15.00e
  <% end %>

  
  <h2>Vähemmän</h2>

  <p>
    Tee metodi <code>public boolean vahemman(Raha verrattava)</code>, joka palauttaa true jos raha-olio jolle metodia kutsutaan on arvoltaan pienempi kuin raha-olio, joka on metodin parametrina.
  </p>

  <% partial 'partials/code_highlight' do %>
Raha a = new Raha(10, 0);
Raha b = new Raha(3, 0);
Raha c = new Raha(5, 0);

System.out.println(a.vahemman(b));  // false
System.out.println(b.vahemman(c));  // true
  <% end %>

  
  <h2>Miinus</h2>

  <p>
    Tee metodi <code>public Raha miinus(Raha vahentaja)</code>, joka palauttaa uuden raha-olion, jonka arvoksi tulee sen olion jolle metodia kutsuttiin ja parametrina olevan olion arvojen erotus. Jos erotus olisi negatiivinen, tulee luotavan raha-olion arvoksi 0.
  </p>

  <p>
    Seuraavassa esimerkkejä metodin toiminnasta
  </p>

    <% partial 'partials/code_highlight' do %>
Raha a = new Raha(10, 0);
Raha b = new Raha(3, 50);

Raha c = a.miinus(b);

System.out.println(a);  // 10.00e
System.out.println(b);  // 3.50e
System.out.println(c);  // 6.50e

c = c.miinus(a);        // HUOM: tässä syntyy uusi Raha-olio, joka laitataan "c:n langan päähän"
//       vanha c:n langan päässä ollut 6.5 euroa häviää ja Javan roskien kerääjä korjaa sen pois

System.out.println(a);  // 10.00e
System.out.println(b);  // 3.50e
System.out.println(c);  // 0.00e
    <% end %>

<% end %>



<%= partial 'partials/quiz', locals: { id: '59c8ece95a392c00046dcbb8' } %>
